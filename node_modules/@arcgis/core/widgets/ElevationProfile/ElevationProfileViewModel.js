/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
import{_ as t}from"../../chunks/tslib.es6.js";import e from"../../Graphic.js";import i from"../../core/Accessor.js";import{min as o}from"../../core/arrayUtils.js";import r from"../../core/Collection.js";import{referenceSetter as s}from"../../core/collectionUtils.js";import n from"../../core/Handles.js";import l from"../../core/Logger.js";import a from"../../core/LRUCache.js";import{isNone as p,destroyMaybe as u,isSome as h,applySome as c}from"../../core/maybe.js";import{memoize as d}from"../../core/memoize.js";import{react as f,syncAndInitial as m}from"../../core/reactiveUtils.js";import{preferredLengthUnit as v,preferredVerticalLengthUnit as y,measurementLengthUnits as g}from"../../core/unitUtils.js";import{aliasOf as _}from"../../core/accessorSupport/decorators/aliasOf.js";import"../../core/has.js";import"../../core/accessorSupport/ensureType.js";import{property as U}from"../../core/accessorSupport/decorators/property.js";import{subclass as b}from"../../core/accessorSupport/decorators/subclass.js";import{ElevationQueryTileCache as j}from"../../layers/support/ElevationQueryTileCache.js";import{defaultUnitPropertyMetadata as P}from"../../properties/defaultUnit.js";import{ElevationProfileController as w}from"./ElevationProfileController.js";import O from"./ElevationProfileLineGround.js";import{ElevationProfileLineCollection as C}from"./elevationProfileLineTypes.js";import{ElevationProfileTool as S}from"./ElevationProfileTool.js";import{ElevationProfileState as E}from"./support/constants.js";import{isPolyline as T,isValidInputPath as D}from"./support/geometryUtils.js";import{isProfileGenerationError as L}from"./support/ProfileGenerationError.js";import{createProfileQueue as k}from"./support/profileUtils.js";import{getBoundsInMeters as G,mergeStatistics as x}from"./support/statisticsUtils.js";const R=l.getLogger("esri.widgets.ElevationProfile.ElevationProfileViewModel");let q=class extends i{constructor(t){super(t),this.view=null,this.input=null,this._getEffectiveUnitsMemoized=d(((t,e)=>({distance:t,elevation:e}))),this.geodesicDistanceThreshold=1e5,this.hoveredChartPosition=null,this.uniformChartScaling=!1,this.highlightEnabled=!0,this.defaultUnit=null,this.queue=null,this._currentTileCache=null,this.error=null,this._handles=new n,this._defaultProfileLineGround=new O,this._userUnitOptions=null,this._userUnit=null,null!=t&&t.profiles||(this.profiles=new r([this._defaultProfileLineGround]))}initialize(){this._handles.add(f((()=>this.view),(t=>{var e;p(t)?R.warnOnce("no view. Widget will be disabled until a view is provided."):this.queue=k("3d"===t.type?null==(e=t.resourceController)?void 0:e.scheduler:void 0)}),m)),this.tool=new S({viewModel:this}),this._controller=new w({viewModel:this})}destroy(){this._handles=u(this._handles),this._defaultProfileLineGround=u(this._defaultProfileLineGround),this._controller=u(this._controller),this._currentTileCache=u(this._currentTileCache),this.tool=u(this.tool),this.queue=u(this.queue)}set profiles(t){const e=this._get("profiles"),i=null!=t?t:new r;this._set("profiles",s(i,e))}get state(){const t=this.view;return h(t)&&t.ready?this.tool.state:E.Disabled}get progress(){let t=0,e=0;for(const i of this.visibleProfiles)t++,e+=i.progress;return t>0?e/t:0}set unitOptions(t){this._userUnitOptions=t,this._set("unitOptions",this._filteredOrAllUnits(this._userUnitOptions))}get unitOptions(){return this._filteredOrAllUnits(this._userUnitOptions)}set unit(t){this._userUnit=t?this._findSelectableUnit(t,this._userUnit):null,this.notifyChange("unit")}get unit(){return this._userUnit?(this._userUnit=this._findSelectableUnit(this._userUnit,this.defaultUnit),this._userUnit):this._findSelectableUnit(this.defaultUnit)}get effectiveUnits(){const t=G(this.visibleProfiles.map((t=>t.result))),e=v(t.maxDistance,"meters",this.unit),i=y(t.maxElevation,"meters",this.unit);return this._getEffectiveUnitsMemoized(e,i)}get hasVertices(){const t=c(this.input,(t=>t.geometry));return T(t)&&t.paths.reduce(((t,e)=>t+e.length),0)>0}get hoveredPoints(){return!p(this.input)&&this.visible&&this.tool.editable?this.visibleProfiles.map((t=>{const e=t.hoveredPoint;return h(e)?{hoveredPoint:e,color:t.color}:null})).filter(h):[]}get statistics(){return x(this.visibleProfiles.map((t=>t.statistics)))}get chartData(){if(p(this.input))return null;const{effectiveUnits:t,progress:e,statistics:i,visibleProfiles:o,uniformChartScaling:r}=this,s=o.filter((t=>t.hasZ)).map((t=>({id:t.id,type:t.type,title:t.title,color:t.color,samples:t.samples,progress:t.progress,chartFillEnabled:t.chartFillEnabled,chartStrokeWidth:t.chartStrokeWidth,chartStrokeOffsetY:t.chartStrokeOffsetY,viewVisualizationEnabled:t.viewVisualizationEnabled})));return 0===s.length?null:{lines:s,effectiveUnits:t,statistics:i,refined:1===e,dynamicElevationRange:o.some((t=>"view"===t.type)),uniformScaling:r}}get visibleProfiles(){return this.profiles.toArray().filter((t=>t.available&&t.visible))}get minDemResolutions(){const t=[];for(const{minDemResolution:e}of this.visibleProfiles)h(e)&&t.push(e);return t}get minDemResolution(){return o(this.minDemResolutions)}get errorState(){const t=c(this.input,(t=>t.geometry));if(!D(t))return"no-valid-input";if(h(this.error)){if(L(this.error))switch(this.error.cause){case"too-complex":return"too-complex";case"invalid-geometry":return"invalid-geometry";case"invalid-elevation-info":return"invalid-elevation-info";case"elevation-query-error":return"no-valid-input"}return"unknown-error"}return 0===this.visibleProfiles.length?"no-visible-profiles":p(this.chartData)&&1===this.progress?"refined-but-no-chart-data":"none"}get tileCache(){this._currentTileCache=u(this._currentTileCache);const t=this.view;if(h(t)&&"3d"===(null==t?void 0:t.type)){var e;const i=null==(e=t.basemapTerrain)?void 0:e.elevationQueryCache;if(h(i))return i}return p(this._currentTileCache)&&(this._currentTileCache=new j(new a(20971520))),this._currentTileCache}get inputIsSketched(){return this.tool.interaction.isSketchedGraphic(this.input)}start(t){this.tool.interaction.start(t)}stop(){this.tool.interaction.stop()}cancel(){this.tool.interaction.cancel()}clear(){this.tool.interaction.clear()}_findSelectableUnit(t,e){const i=this.unitOptions;return h(t)&&-1!==i.indexOf(t)?t:e?this._findSelectableUnit(e):i[0]}_filteredOrAllUnits(t){const e=(h(t)?t:[]).filter((t=>-1!==g.indexOf(t)));return 0===e.length?g.slice():e}};t([U()],q.prototype,"view",void 0),t([U({type:e})],q.prototype,"input",void 0),t([U({type:C,nonNullable:!0})],q.prototype,"profiles",null),t([U({readOnly:!0})],q.prototype,"state",null),t([U({readOnly:!0})],q.prototype,"progress",null),t([U()],q.prototype,"unitOptions",null),t([U()],q.prototype,"unit",null),t([U({readOnly:!0})],q.prototype,"effectiveUnits",null),t([U({type:Number})],q.prototype,"geodesicDistanceThreshold",void 0),t([U()],q.prototype,"hoveredChartPosition",void 0),t([U()],q.prototype,"uniformChartScaling",void 0),t([_("tool.highlightEnabled")],q.prototype,"highlightEnabled",void 0),t([U({readOnly:!0})],q.prototype,"hoveredPoints",null),t([U({readOnly:!0})],q.prototype,"statistics",null),t([U()],q.prototype,"chartData",null),t([U()],q.prototype,"visibleProfiles",null),t([U()],q.prototype,"minDemResolutions",null),t([U({readOnly:!0})],q.prototype,"minDemResolution",null),t([U({readOnly:!0})],q.prototype,"errorState",null),t([U(P)],q.prototype,"defaultUnit",void 0),t([U()],q.prototype,"queue",void 0),t([U()],q.prototype,"tileCache",null),t([U()],q.prototype,"tool",void 0),t([_("tool.visible")],q.prototype,"visible",void 0),t([U()],q.prototype,"error",void 0),t([U()],q.prototype,"inputIsSketched",null),t([U()],q.prototype,"_defaultProfileLineGround",void 0),t([U()],q.prototype,"_userUnitOptions",void 0),t([U()],q.prototype,"_controller",void 0),t([U()],q.prototype,"_userUnit",void 0),q=t([b("esri.widgets.ElevationProfile.ElevationProfileViewModel")],q);const z=q;export{z as default};
