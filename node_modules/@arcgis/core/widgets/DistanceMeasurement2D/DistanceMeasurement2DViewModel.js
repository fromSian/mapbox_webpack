/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
import{_ as t}from"../../chunks/tslib.es6.js";import e from"../../core/Handles.js";import s from"../../core/Logger.js";import{isNone as i,isSome as r}from"../../core/maybe.js";import{measurementLengthUnits as o}from"../../core/unitUtils.js";import{init as n}from"../../core/watchUtils.js";import{property as a}from"../../core/accessorSupport/decorators/property.js";import"../../core/arrayUtils.js";import"../../core/has.js";import"../../core/accessorSupport/ensureType.js";import{subclass as l}from"../../core/accessorSupport/decorators/subclass.js";import{defaultUnitPropertyMetadata as d}from"../../properties/defaultUnit.js";import p,{isSupported as u}from"./DistanceMeasurement2DTool.js";import{InteractiveToolViewModel as h}from"../support/InteractiveToolViewModel.js";const c={handleWidth:8,handleColor:[255,128,0,.5],pathWidth:5,pathPrimaryColor:[255,128,0,255],pathSecondaryColor:[255,255,255,255]},m=s.getLogger("esri.widgets.DistanceMeasurement2D.DistanceMeasurement2DViewModel");let y=class extends h{constructor(t){super(t),this.logger=m,this.supportedViewType="2d",this.unsupportedErrorMessage="DistanceMeasurement2DViewModel is only supported in 2D views.",this._handles=new e,this.geodesicDistanceThreshold=1e5,this.measurement=null,this.measurementLabel=null,this.palette=c}initialize(){this._handles.add([n(this,["unit","palette","geodesicDistanceThreshold"],((t,e,s)=>{this.tool&&(this.tool[s]=t)}))])}destroy(){this._handles&&(this._handles.destroy(),this._handles=null)}get state(){var t;return this.disabled||i(this.view)||!u(null==(t=this.view)?void 0:t.spatialReference)?"disabled":r(this.tool)&&this.measurement?this.tool.active?"measuring":"measured":"ready"}get unit(){return this._validateUnit(this.defaultUnit)}set unit(t){void 0!==t?this._override("unit",this._validateUnit(t)):this._clearOverride("unit")}get unitOptions(){return o}set unitOptions(t){void 0!==t?this._override("unitOptions",this._validateUnits(t)):this._clearOverride("unitOptions")}start(){return this.createTool()}clear(){this.removeTool()}createToolParams(){return{toolConstructor:p,constructorArguments:()=>({geodesicDistanceThreshold:this.geodesicDistanceThreshold,palette:this.palette,unit:this.unit})}}_validateUnit(t){return-1!==this.unitOptions.indexOf(t)?t:-1!==this.unitOptions.indexOf(this.defaultUnit)?this.defaultUnit:this.unitOptions[0]}_validateUnits(t=[]){const e=t.filter((t=>-1!==o.indexOf(t)));return 0===e.length?o.slice():e}};t([a(d)],y.prototype,"defaultUnit",void 0),t([a({type:Number})],y.prototype,"geodesicDistanceThreshold",void 0),t([a({readOnly:!0,aliasOf:"tool.measurement"})],y.prototype,"measurement",void 0),t([a({readOnly:!0,aliasOf:"tool.measurementLabel"})],y.prototype,"measurementLabel",void 0),t([a()],y.prototype,"palette",void 0),t([a({readOnly:!0})],y.prototype,"state",null),t([a({type:String})],y.prototype,"unit",null),t([a({type:[String]})],y.prototype,"unitOptions",null),y=t([l("esri.widgets.DistanceMeasurement2D.DistanceMeasurement2DViewModel")],y);const f=y;export{f as default};
