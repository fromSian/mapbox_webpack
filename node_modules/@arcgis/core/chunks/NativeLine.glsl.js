/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
import{Slice as e}from"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js";import{Transform as o}from"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js";import{VertexColor as t}from"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexColor.glsl.js";import{OutputHighlight as i}from"../views/3d/webgl-engine/core/shaderLibrary/output/OutputHighlight.glsl.js";import{LineStipple as r}from"../views/3d/webgl-engine/core/shaderLibrary/shading/LineStipple.glsl.js";import{symbolAlphaCutoff as l}from"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaDiscard.glsl.js";import{glsl as s}from"../views/3d/webgl-engine/core/shaderModules/interfaces.js";import{ShaderBuilder as a}from"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js";function d(d){const n=new a;return n.include(o,{linearDepth:!1}),n.include(t,d),n.include(r,{...d,stippleRequiresStretchMeasure:!1}),n.vertex.uniforms.add("proj","mat4").add("view","mat4"),d.stippleEnabled&&(n.vertex.uniforms.add("ndcToPixel","vec2"),n.attributes.add("uv0","vec2"),n.attributes.add("auxpos1","vec3")),n.attributes.add("position","vec3"),n.varyings.add("vpos","vec3"),n.vertex.code.add(s`void main(void) {
vpos = position;
forwardNormalizedVertexColor();
gl_Position = transformPosition(proj, view, vpos);`),d.stippleEnabled&&(n.vertex.code.add(s`vec4 vpos2 = transformPosition(proj, view, auxpos1);
float lineSegmentPixelSize = length((vpos2.xy / vpos2.w - gl_Position.xy / gl_Position.w) * ndcToPixel);`),d.draped||n.vertex.code.add(s`vec3 segmentCenter = (position + auxpos1) * 0.5;
float worldToScreenRatio = computeWorldToScreenRatio(segmentCenter);`),n.vertex.code.add(s`float discreteWorldToScreenRatio = discretizeWorldToScreenRatio(worldToScreenRatio);`),d.draped?n.vertex.code.add(s`float startPseudoScreen = uv0.y * discreteWorldToScreenRatio - mix(0.0, lineSegmentPixelSize, uv0.x);
float segmentLengthPseudoScreen = lineSegmentPixelSize;`):n.vertex.code.add(s`float segmentLengthRender = length(position - auxpos1);
float startPseudoScreen = mix(uv0.y, uv0.y - segmentLengthRender, uv0.x) * discreteWorldToScreenRatio;
float segmentLengthPseudoScreen = segmentLengthRender * discreteWorldToScreenRatio;`),n.vertex.code.add(s`vec2 stippleDistanceLimits = computeStippleDistanceLimits(startPseudoScreen, segmentLengthPseudoScreen, lineSegmentPixelSize, stipplePatternPixelSize);
vStippleDistance = mix(stippleDistanceLimits.x, stippleDistanceLimits.y, uv0.x);
vStippleDistance *= gl_Position.w;`)),n.vertex.code.add(s`}`),4===d.output&&n.include(i),n.include(e,d),n.fragment.uniforms.add("constantColor","vec4").add("alphaCoverage","float"),n.fragment.code.add(s`
  void main() {
    discardBySlice(vpos);

    vec4 color = ${d.attributeColor?"vColor":"constantColor"};

    float stippleAlpha = getStippleAlpha();
    discardByStippleAlpha(stippleAlpha, stippleAlphaColorDiscard);

    vec4 finalColor = blendStipple(vec4(color.rgb, color.a * alphaCoverage), stippleAlpha);

    if (finalColor.a < ${s.float(l)}) {
      discard;
    }

    ${0===d.output?s`gl_FragColor = highlightSlice(finalColor, vpos);`:""}
    ${4===d.output?s`outputHighlight();`:""}
  }
  `),n}const n=Object.freeze({__proto__:null,build:d});export{n as N,d as b};
