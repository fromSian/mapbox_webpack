/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
import{_ as r}from"../../chunks/tslib.es6.js";import{JSONSupport as o}from"../../core/JSONSupport.js";import{isSome as t}from"../../core/maybe.js";import{property as s}from"../../core/accessorSupport/decorators/property.js";import"../../core/arrayUtils.js";import"../../core/has.js";import"../../core/accessorSupport/ensureType.js";import{subclass as e}from"../../core/accessorSupport/decorators/subclass.js";import{f as i,e as a,a as n,b as l,m as p,n as c,p as m}from"../../chunks/mat4.js";import{c as h,I as u}from"../../chunks/mat4f64.js";import{m as g,k as f}from"../../chunks/vec3.js";import{c as j,f as y,a as x}from"../../chunks/vec3f64.js";import b from"../Point.js";import{computeTranslationToOriginAndRotation as v,projectBuffer as d}from"../projection.js";import{getSphericalPCPFForEllipsoid as M,getReferenceEllipsoid as N}from"../projectionEllipsoid.js";import{create as w,axis as k,angleRad as I}from"./axisAngleDegrees.js";import{BufferViewVec3f64 as S}from"./buffer/BufferView.js";import{t as A}from"../../chunks/vec32.js";import{c as T}from"../../chunks/vec33.js";var B;let L=B=class extends o{constructor(r){super(r),this.origin=j(),this.translation=j(),this.rotation=w(),this.scale=y(1,1,1),this.geographic=!0}get localMatrix(){const r=h();return i(r,r,this.scale),a(r,r,I(this.rotation),k(this.rotation)),n(r,r,this.translation),r}get localMatrixInverse(){return l(h(),this.localMatrix)}applyLocal(r,o){return g(o,r,this.localMatrix)}applyLocalInverse(r,o){return g(o,r,this.localMatrixInverse)}project(r,o){const t=new Float64Array(r.length),s=S.fromTypedArray(t),e=S.fromTypedArray(r);if(this.geographic){const r=M(N(o)),i=h();return v(o,this.origin,i,r),p(i,i,this.localMatrix),A(s,e,i),d(t,r,0,t,o,0,t.length/3),t}const{localMatrix:i,origin:a}=this;c(i,u)?T(s,e):A(s,e,i);for(let n=0;n<t.length;n+=3)t[n+0]+=a[0],t[n+1]+=a[1],t[n+2]+=a[2];return t}getOriginPoint(r){const[o,t,s]=this.origin;return new b({x:o,y:t,z:s,spatialReference:r})}equals(r){return t(r)&&this.geographic===r.geographic&&f(this.origin,r.origin)&&m(this.localMatrix,r.localMatrix)}clone(){const r={origin:x(this.origin),translation:x(this.translation),rotation:w(this.rotation),scale:x(this.scale),geographic:this.geographic};return new B(r)}};r([s({type:[Number],nonNullable:!0,json:{write:!0}})],L.prototype,"origin",void 0),r([s({type:[Number],nonNullable:!0,json:{write:!0}})],L.prototype,"translation",void 0),r([s({type:[Number],nonNullable:!0,json:{write:!0}})],L.prototype,"rotation",void 0),r([s({type:[Number],nonNullable:!0,json:{write:!0}})],L.prototype,"scale",void 0),r([s({type:Boolean,nonNullable:!0,json:{write:!0}})],L.prototype,"geographic",void 0),r([s()],L.prototype,"localMatrix",null),r([s()],L.prototype,"localMatrixInverse",null),L=B=r([e("esri.geometry.support.MeshTransform")],L);const O=L;export{O as default};
