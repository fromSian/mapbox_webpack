/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
import"../../geometry.js";import{isSome as r}from"../../core/maybe.js";import e from"../../geometry/support/GeographicTransformation.js";import t from"./PixelBlock.js";import{decode as o}from"./rasterFormats/RasterCodec.js";import{estimateStatisticsHistograms as s,split as i,mosaic as a,approximateTransform as n}from"./rasterFunctions/pixelUtils.js";import{requirePE as m,load as l,getProjectionOffsetGrid as f}from"./rasterFunctions/rasterProjectionHelper.js";import{convertVectorFieldData as c}from"./rasterFunctions/vectorFieldUtils.js";import{readTransform as p}from"./rasterTransforms/utils.js";import u from"../../renderers/support/RasterSymbolizer.js";import{createStreamlinesMesh as d}from"../../views/2d/engine/flow/dataUtils.js";import S from"../../geometry/Extent.js";class h{convertVectorFieldData(e){const o=t.fromJSON(e.pixelBlock),s=c(o,e.type);return Promise.resolve(r(s)&&s.toJSON())}async decode(r){const e=await o(r.data,r.options);return e&&e.toJSON()}symbolize(e){e.pixelBlock=t.fromJSON(e.pixelBlock),e.extent=e.extent?S.fromJSON(e.extent):null;const o=this.symbolizer.symbolize(e);return Promise.resolve(r(o)&&o.toJSON())}async updateSymbolizer(r){var e;this.symbolizer=u.fromJSON(r.symbolizerJSON),r.histograms&&"rasterStretch"===(null==(e=this.symbolizer)?void 0:e.rendererJSON.type)&&(this.symbolizer.rendererJSON.histograms=r.histograms)}stretch(e){const o=this.symbolizer.simpleStretch(t.fromJSON(e.srcPixelBlock),e.stretchParams);return Promise.resolve(r(o)&&o.toJSON())}estimateStatisticsHistograms(r){const e=s(t.fromJSON(r.srcPixelBlock));return Promise.resolve(e)}split(r){const e=i(t.fromJSON(r.srcPixelBlock),r.tileSize,r.maximumPyramidLevel);return e&&e.forEach(((r,t)=>{e.set(t,null==r?void 0:r.toJSON())})),Promise.resolve(e)}async mosaicAndTransform(r){const e=r.srcPixelBlocks.map((r=>r?new t(r):null)),o=a(e,r.srcMosaicSize,{blockWidths:r.blockWidths,alignmentInfo:r.alignmentInfo});if(!r.coefs)return o&&o.toJSON();const s=n(o,r.destDimension,r.coefs,r.sampleSpacing,r.interpolation);return s&&s.toJSON()}async createStreamlinesMesh(r,e){const t={data:new Float32Array(r.flowData.buffer),width:r.flowData.width,height:r.flowData.height},{vertexData:o,indexData:s}=await d(r.rendererSettings,t,e.signal);return{result:{vertexBuffer:o.buffer,indexBuffer:s.buffer},transferList:[o.buffer,s.buffer]}}async getProjectionOffsetGrid(r){const t=S.fromJSON(r.projectedExtent),o=S.fromJSON(r.srcBufferExtent);let s=null;r.datumTransformationStemps&&(s=new e({steps:r.datumTransformationStemps})),m(t.spatialReference,o.spatialReference,s)&&await l();const i=r.rasterTransform?p(r.rasterTransform):null;return f({...r,projectedExtent:t,srcBufferExtent:o,datumTransformation:s,rasterTransform:i})}}export{h as default};
