/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
import{_ as e}from"../../chunks/tslib.es6.js";import t from"../../request.js";import i from"../../core/Accessor.js";import r from"../../core/Error.js";import{HandleOwnerMixin as l}from"../../core/HandleOwner.js";import s from"../../core/Logger.js";import a from"../../core/LRUCache.js";import o from"../../core/PooledArray.js";import{onAbort as n,isAbortError as c,isAborted as h,createAbortError as p}from"../../core/promiseUtils.js";import{waitTicks as m}from"../../core/scheduling.js";import{objectToQuery as u}from"../../core/urlUtils.js";import{init as f}from"../../core/watchUtils.js";import{property as v}from"../../core/accessorSupport/decorators/property.js";import"../../core/arrayUtils.js";import"../../core/has.js";import{cast as y}from"../../core/accessorSupport/decorators/cast.js";import{subclass as b}from"../../core/accessorSupport/decorators/subclass.js";import{tilemapDefinitionId as d,Tilemap as _}from"./Tilemap.js";var g;const w=s.getLogger("esri.layers.support.TilemapCache");let T=g=class extends(l(i)){constructor(e){super(e),this._pendingTilemapRequests={},this._availableLevels={},this.levels=5,this.cacheByteSize=2097152,this.request=t,this._prefetchingEnabled=!0}initialize(){this._tilemapCache=new a(this.cacheByteSize),this.handles.add([this.watch(["layer.parsedUrl","layer.tileServers?","layer.apiKey?","layer.customParameters?"],(()=>this._initializeTilemapDefinition())),f(this,"layer.tileInfo.lods",(e=>this._initializeAvailableLevels(e)),!0)]),this._initializeTilemapDefinition()}castLevels(e){return e<=2?(w.error("Minimum levels for Tilemap is 3, but got ",e),3):e}get size(){return 1<<this.levels}fetchTilemap(e,t,i,l){if(!this._availableLevels[e])return Promise.reject(new r("tilemap-cache:level-unavailable",`Level ${e} is unavailable in the service`));const s=this._tmpTilemapDefinition,a=this._tilemapFromCache(e,t,i,s);if(a)return Promise.resolve(a);const o=l&&l.signal;return l={...l,signal:null},new Promise(((e,t)=>{n(o,(()=>t(p())));const i=d(s);let r=this._pendingTilemapRequests[i];if(!r){r=_.fromDefinition(s,l).then((e=>(this._tilemapCache.put(i,e,e.byteSize),e)));const e=()=>delete this._pendingTilemapRequests[i];this._pendingTilemapRequests[i]=r,r.then(e,e)}r.then(e,t)}))}getAvailability(e,t,i){if(!this._availableLevels[e])return"unavailable";const r=this._tilemapFromCache(e,t,i,this._tmpTilemapDefinition);return r?r.getAvailability(t,i):"unknown"}fetchAvailability(e,t,i,l){return this._availableLevels[e]?this.fetchTilemap(e,t,i,l).catch((e=>e)).then((l=>{if(l instanceof _){const s=l.getAvailability(t,i);return"unavailable"===s?Promise.reject(new r("tile-map:tile-unavailable","Tile is not available",{level:e,row:t,col:i})):s}if(c(l))throw l;return"unknown"})):Promise.reject(new r("tilemap-cache:level-unavailable",`Level ${e} is unavailable in the service`))}fetchAvailabilityUpsample(e,t,i,r,l){r.level=e,r.row=t,r.col=i;const s=this.layer.tileInfo;s.updateTileInfo(r);const a=this.fetchAvailability(e,t,i,l).catch((e=>{if(c(e))throw e;if(s.upsampleTile(r))return this.fetchAvailabilityUpsample(r.level,r.row,r.col,r);throw e}));return this._fetchAvailabilityUpsamplePrefetch(r.id,e,t,i,l,a),a}async _fetchAvailabilityUpsamplePrefetch(e,t,i,r,l,s){if(!this._prefetchingEnabled)return;const a=`prefetch-${e}`;if(this.handles.has(a))return;const o=new AbortController;s.then((()=>o.abort()),(()=>o.abort()));let n=!1;const c={remove(){n||(n=!0,o.abort())}};if(this.handles.add(c,a),await m(10,o.signal).catch((()=>{})),n||(n=!0,this.handles.remove(a)),h(o))return;const p={id:e,level:t,row:i,col:r},u={...l,signal:o.signal},f=this.layer.tileInfo;for(let h=0;g._prefetches.length<g._maxPrefetch&&f.upsampleTile(p);++h){const e=this.fetchAvailability(p.level,p.row,p.col,u);g._prefetches.push(e);const t=()=>{g._prefetches.removeUnordered(e)};e.then(t,t)}}_initializeTilemapDefinition(){var e;if(!this.layer.parsedUrl)return;const{parsedUrl:t,apiKey:i,customParameters:r}=this.layer;this._tilemapCache.clear(),this._tmpTilemapDefinition={service:{url:t.path,query:u({...t.query,...r,token:null!=i?i:null==(e=t.query)?void 0:e.token}),tileServers:this.layer.tileServers,request:this.request,type:this.layer.type},width:this.size,height:this.size,level:0,row:0,col:0}}_tilemapFromCache(e,t,i,r){r.level=e,r.row=t-t%this.size,r.col=i-i%this.size;const l=d(r);return this._tilemapCache.get(l)}_initializeAvailableLevels(e){this._availableLevels={},e&&e.forEach((e=>this._availableLevels[e.level]=!0))}get test(){const e=this;return{get prefetchingEnabled(){return e._prefetchingEnabled},set prefetchingEnabled(t){e._prefetchingEnabled=t},hasTilemap:(t,i,r)=>!!e._tilemapFromCache(t,i,r,e._tmpTilemapDefinition)}}};T._maxPrefetch=4,T._prefetches=new o({initialSize:g._maxPrefetch}),e([v({constructOnly:!0,type:Number})],T.prototype,"levels",void 0),e([y("levels")],T.prototype,"castLevels",null),e([v({readOnly:!0,type:Number})],T.prototype,"size",null),e([v({constructOnly:!0,type:Number})],T.prototype,"cacheByteSize",void 0),e([v({constructOnly:!0})],T.prototype,"layer",void 0),e([v({constructOnly:!0})],T.prototype,"request",void 0),T=g=e([b("esri.layers.support.TilemapCache")],T);export{T as TilemapCache};
