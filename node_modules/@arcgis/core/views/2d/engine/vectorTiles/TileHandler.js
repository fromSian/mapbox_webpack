/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
import e from"../../../../request.js";import t from"../../../../core/has.js";import{isAbortError as s,eachAlways as r}from"../../../../core/promiseUtils.js";import{addQueryParameters as i}from"../../../../core/urlUtils.js";import{open as o}from"../../../../core/workers/workers.js";import a from"./GlyphMosaic.js";import l from"./GlyphSource.js";import n from"./SpriteMosaic.js";import{perfAdd as c}from"./decluttering/debugging.js";import h from"../../tiling/TileKey.js";class u{constructor(e,t,s){this._layer=e,this._styleRepository=t,this.devicePixelRatio=s,this._spriteMosaic=null,this._glyphMosaic=null,this._connection=null}destroy(){this._connection&&(this._connection.close(),this._connection=null),this._styleRepository=null,this._layer=null,this._spriteMosaic&&(this._spriteMosaic=null),this._glyphMosaic&&(this._glyphMosaic=null)}get spriteMosaic(){return this._spriteSourcePromise.then((()=>this._spriteMosaic))}get glyphMosaic(){return this._glyphMosaic}async start(e){this._spriteSourcePromise=this._layer.loadSpriteSource(this.devicePixelRatio,e),this._spriteSourcePromise.then((e=>{this._spriteMosaic=new n(1024,1024,250),this._spriteMosaic.setSpriteSource(e)}));const s=new l(this._layer.currentStyleInfo.glyphsUrl?i(this._layer.currentStyleInfo.glyphsUrl,{...this._layer.customParameters,token:this._layer.apiKey}):null);this._glyphMosaic=new a(1024,1024,s),this._broadcastPromise=o("WorkerTileHandler",{client:this,schedule:e.schedule,signal:e.signal}).then((s=>(this._connection=s,Promise.all(this._connection.broadcast("setStyle",{style:this._layer.currentStyleInfo.style,vectorTileLayerMaxBuffers:t("vectortilelayer-max-buffers")},e)))))}async updateStyle(e){return await this._broadcastPromise,this._broadcastPromise=Promise.all(this._connection.broadcast("updateStyle",e)),this._broadcastPromise}async setStyle(e,s){await this._broadcastPromise,this._styleRepository=e,this._spriteSourcePromise=this._layer.loadSpriteSource(this.devicePixelRatio,null),this._spriteSourcePromise.then((e=>{this._spriteMosaic=new n(1024,1024,250),this._spriteMosaic.setSpriteSource(e)}));const r=new l(this._layer.currentStyleInfo.glyphsUrl?i(this._layer.currentStyleInfo.glyphsUrl,{...this._layer.customParameters,token:this._layer.apiKey}):null);return this._glyphMosaic=new a(1024,1024,r),this._broadcastPromise=Promise.all(this._connection.broadcast("setStyle",{style:s,vectorTileLayerMaxBuffers:t("vectortilelayer-max-buffers")})),this._broadcastPromise}fetchTileData(e,t){return this._getRefKeys(e,t).then((e=>{const s=this._layer.sourceNameToSource,r=[];for(const t in s)r.push(t);return this._getSourcesData(r,e,t)}))}parseTileData(e,t){const s=e&&e.data;if(!s)return Promise.resolve(null);const{sourceName2DataAndRefKey:r,transferList:i}=s;return 0===Object.keys(r).length?Promise.resolve(null):this._broadcastPromise.then((()=>this._connection.getAvailableClient().then((s=>s.invoke("createTileAndParse",{key:e.key.id,sourceName2DataAndRefKey:r,styleLayerUIDs:e.styleLayerUIDs},{...t,transferList:i})))))}async getSprites(e){return await this._spriteSourcePromise,this._spriteMosaic.getSpriteItems(e)}getGlyphs(e){return this._glyphMosaic.getGlyphItems(e.font,e.codePoints)}perfReport({key:e,milliseconds:t}){c(e,t,"ms")}async _getTilePayload(e,t,r){const i=h.pool.acquire(e.id),o=this._layer.sourceNameToSource[t].getSourceTileUrl(i.level,i.row,i.col);h.pool.release(i);try{return{protobuff:await this.request(o,r),sourceName:t}}catch(a){if(s(a))throw a;return{protobuff:null,sourceName:t}}}request(t,s){return e(t,{responseType:"array-buffer",...s}).then((({data:e})=>e))}_getRefKeys(e,t){const s=this._layer.sourceNameToSource,i=new Array;for(const r in s){const o=s[r].getRefKey(e,t);i.push(o)}return r(i)}_getSourcesData(e,t,s){const i=[];for(let r=0;r<t.length;r++)if(null==t[r].value||null==e[r])i.push(null);else{const o=this._getTilePayload(t[r].value,e[r],s);i.push(o)}return r(i).then((e=>{const s={},r=[];for(let i=0;i<e.length;i++)if(e[i].value&&e[i].value&&e[i].value.protobuff&&e[i].value.protobuff.byteLength>0){const o=t[i].value.id;s[e[i].value.sourceName]={refKey:o,protobuff:e[i].value.protobuff},r.push(e[i].value.protobuff)}return{sourceName2DataAndRefKey:s,transferList:r}}))}}export{u as TileHandler};
