/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
import{andThen as e,isNone as t,isSome as i,unwrap as r}from"../../../../../../core/maybe.js";import{pt2px as s}from"../../../../../../core/screenUtils.js";import{deltaDecodeGeometry as o,convertFromGeometry as n}from"../../../../../../layers/graphics/featureConversionUtils.js";import{CIMMarkerPlacementHelper as h}from"../../../../../../symbols/cim/placements/CIMMarkerPlacementHelper.js";import{MAGIC_LABEL_LINE_HEIGHT as a}from"../../definitions.js";import{WGLGeometryType as x}from"../../enums.js";import{i8888to32 as l,i1616to32 as d}from"../../number.js";import{MaterialKeyBase as m}from"../../materialKey/MaterialKey.js";import{shapeGlyphs as c}from"./shapingUtils.js";const f=8,_=_=>class extends _{constructor(...e){super(...e),this._isCIM=!1,this._vertexBoundsScale=1,this.geometryType=x.TEXT,this._aux=l(0,0,this._referenceSize,this._bitset)}bindTextInfo(t,i){t&&t.length?this._shapingInfo=e(t,(e=>c(e,i,{scale:this._scale,angle:this._angle,xOffset:this._xOffset,yOffset:this._yOffset,hAlign:this._xAlignD,vAlign:this._yAlignD,maxLineWidth:Math.max(32,Math.min(this._lineWidth,512)),lineHeight:a*Math.max(.25,Math.min(this._lineHeight,4)),decoration:this._decoration,isCIM:this._isCIM}))):this._shapingInfo=null}_write(e,t,i){const r=t.getDisplayId();this._writeGeometry(e,t,r,i)}_writeGeometry(e,r,s,h){const a=this._shapingInfo;if(t(a))return;if(i(this._textPlacement)){const t=null!=h?h:r.readLegacyGeometryForDisplay();return this._writePlacedText(e,s,t,a)}const x=h?o(n(h),2):"esriGeometryPolygon"===r.geometryType?r.readCentroid():r.readGeometryForDisplay();if(!t(x)){if(x.isPoint){const[t,i]=x.coords;if(!e.hasAggregates&&e.hasPixelBufferEnabled&&(t<0||t>=512||i<0||i>=512))return;return this._writeGlyphs(e,s,{x:t,y:i},a)}x.forEachVertex(((t,i)=>this._writeGlyphs(e,s,{x:t,y:i},a)))}}_writePlacedText(e,t,i,o){const n=r(this._textPlacement),a=h.getPlacement(i,n,s(1));if(!a)return;let x=a.next();for(;null!=x;){const i=x.getAngle();o.setRotation(i);const r=x.tx,s=x.ty;r<0||r>=512||s<0||s>=512?x=a.next():(this._writeGlyphs(e,t,{x:r,y:s},o),o.setRotation(-i),x=a.next())}}_writeGlyphs(e,t,i,r){const s=m.load(this._materialKey),o=d(Math.round(f*i.x),Math.round(f*i.y)),n=this._vertexBoundsScale,h=r.bounds,a=2*Math.max(h.width,h.height);for(const x of r.glyphs)s.textureBinding=x.textureBinding,e.recordStart(t,s.data,this.geometryType,!0),e.vertexBounds(i.x+h.x+this._xOffset,i.y+h.y-this._yOffset,a*n,a*n),this._writeVertices(e,t,o,x),e.recordEnd()}_writeGlyph(e,t,i,r,s){const o=m.load(this._materialKey),n=d(Math.round(f*i),Math.round(f*r));o.textureBinding=s.textureBinding,e.recordStart(t,o.data,this.geometryType,!0);const h=s.bounds,a=this._vertexBoundsScale;e.vertexBounds(i+h.x*a,r+h.y*a,h.width*a,h.height*a),this._writeVertices(e,t,n,s),e.recordEnd()}_writeVertices(e,t,i,r){const s=e.vertexCount();this._writeVertexCommon(e,t,i,r),e.vertexWrite(r.offsets.upperLeft),e.vertexWrite(r.texcoords.upperLeft),e.vertexEnd(),this._writeVertexCommon(e,t,i,r),e.vertexWrite(r.offsets.upperRight),e.vertexWrite(r.texcoords.upperRight),e.vertexEnd(),this._writeVertexCommon(e,t,i,r),e.vertexWrite(r.offsets.lowerLeft),e.vertexWrite(r.texcoords.lowerLeft),e.vertexEnd(),this._writeVertexCommon(e,t,i,r),e.vertexWrite(r.offsets.lowerRight),e.vertexWrite(r.texcoords.lowerRight),e.vertexEnd(),e.indexWrite(s+0),e.indexWrite(s+1),e.indexWrite(s+2),e.indexWrite(s+1),e.indexWrite(s+3),e.indexWrite(s+2)}_writeVertexCommon(e,t,i,r){const s=this._color,o=this._haloColor,n=l(0,0,this._referenceSize,this._bitset),h=l(0,0,this._size,this._haloSize);e.vertexWrite(i),e.vertexWrite(t),e.vertexWrite(s),e.vertexWrite(o),e.vertexWrite(h),e.vertexWrite(n),e.vertexWrite(this._minMaxZoom)}};export{_ as default};
