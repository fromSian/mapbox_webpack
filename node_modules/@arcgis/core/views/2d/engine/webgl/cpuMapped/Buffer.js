/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
import{andThen as t,isSome as i,unwrapOrThrow as r,isNone as s}from"../../../../../core/maybe.js";import e from"../../../../webgl/BufferObject.js";import"../../../../webgl/FramebufferObject.js";import"../../../../../core/has.js";import"../../../../webgl/checkWebGLError.js";import"../../../../webgl/enums.js";import"../../../../../chunks/builtins.js";import"../../../../webgl/Texture.js";import"../../../../webgl/VertexArrayObject.js";import{TypedBuffer as h}from"../BufferPool.js";import{FreeList as n}from"./FreeList.js";const a=1.25,d=32767,u=d<<16|d;class c{constructor(t,i,r){const s=h.create(i*r*Uint32Array.BYTES_PER_ELEMENT);this.strideInt=r,this.bufferType=t,this.dirty={start:1/0,end:0},this.gpu=null,this._cpu=s,this.clear()}get elementSize(){return this._cpu.length/this.strideInt}destroy(){t(this.gpu,(t=>t.dispose())),t(this._cpu,(t=>t.destroy())),t(this._cpu2,(t=>t.destroy()))}clear(){this.dirty.start=1/0,this.dirty.end=0,this.freeList=new n({start:0,end:this._cpu.length/this.strideInt}),this.fillPointer=0}ensure(t){if(this.maxAvailableSpace()>=t)return;if(t*this.strideInt>this._cpu.length-this.fillPointer){i(this.gpu)&&(this.gpu=null);const r=this._cpu.length/this.strideInt,s=Math.round((r+t)*a),e=s*this.strideInt;this._cpu.expand(e*Uint32Array.BYTES_PER_ELEMENT),this.freeList.free(r,s-r)}}set(t,i){this._cpu.array[t]!==i&&(this._cpu.array[t]=i,this.dirty.start=Math.min(t,this.dirty.start),this.dirty.end=Math.max(t,this.dirty.end))}getBuffer(){if(!this._cpu2){const t=this._cpu.slice();this._cpu2=t}return this._cpu2.length!==this._cpu.length&&this._cpu2.expand(this._cpu.length*this._cpu.array.BYTES_PER_ELEMENT),this._cpu2.set(this._cpu),this._cpu2}get bufferSize(){return this._cpu.length/this.strideInt}maxAvailableSpace(){return this.freeList.maxAvailableSpace()}insert(t,i,s,e){const h=s*this.strideInt,n=i*this.strideInt*Uint32Array.BYTES_PER_ELEMENT,a=new Uint32Array(t,n,h),d=r(this.freeList.firstFit(s),"First fit region must be defined")*this.strideInt,u=h,c=d/this.strideInt-i;if(0!==e)for(let r=0;r<a.length;r++)a[r]+=e;return this._cpu.array.set(a,d),this.dirty.start=Math.min(this.dirty.start,d),this.dirty.end=Math.max(this.dirty.end,d+u),this.fillPointer=Math.max(this.fillPointer,d+u),c}free(t,i,r){const s=t*this.strideInt,e=(t+i)*this.strideInt;if(!0===r)for(let h=t;h!==t+i;h++)this._cpu.array[h*this.strideInt]=u;this.dirty.start=Math.min(this.dirty.start,s),this.dirty.end=Math.max(this.dirty.end,e),this.freeList.free(t,i)}upload(t){if(this.dirty.end){if(s(this.gpu))return this.gpu=this._createBuffer(t),this.dirty.start=1/0,void(this.dirty.end=0);this.gpu.setSubDataFromView(this._cpu.array,this.dirty.start,this.dirty.start,this.dirty.end),this.dirty.start=1/0,this.dirty.end=0}}_createBuffer(t){const i=35048;return"index"===this.bufferType?e.createIndex(t,i,this._cpu.array):e.createVertex(t,i,this._cpu.array)}}export{c as Buffer};
