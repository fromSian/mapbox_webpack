/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
import"../../../../geometry.js";import t from"../../../../core/Logger.js";import{deg2rad as e}from"../../../../core/mathUtils.js";import{isNone as n}from"../../../../core/maybe.js";import{throwIfAborted as r}from"../../../../core/promiseUtils.js";import o from"../../../../core/RandomLCG.js";import{getInfo as i}from"../../../../geometry/support/spatialReferenceUtils.js";import a from"../../../../geometry/Extent.js";const l=t.getLogger("esri.views.2d.engine.flow.dataUtils"),s=8;async function c(t,e,n){const o=performance.now(),i=h(t,e),a=performance.now(),s=u(t,i,e.width,e.height),c=performance.now(),f=m(s,!0),d=performance.now(),g=w(f),p=performance.now();if(t.profile){const t={"_createFlowFieldFromData()":Math.round(a-o),"_getStreamlines()":Math.round(c-a),"createAnimatedLinesData()":Math.round(d-c),"createLinesMesh()":Math.round(p-d),"Total elapsed time":Math.round(p-o)};l.info("createStreamlinesMesh profile",t)}return await Promise.resolve(),r(n),g}function h(t,e){const n=d(e.data,e.width,e.height,t.smoothing);if(t.interpolate){return(t,r)=>{const o=Math.floor(t),i=Math.floor(r);if(o<0||o>=e.width)return[0,0];if(i<0||i>=e.height)return[0,0];const a=t-o,l=r-i,s=o,c=i,h=o<e.width-1?o+1:o,f=i<e.height-1?i+1:i,u=n[2*(c*e.width+s)],d=n[2*(c*e.width+h)],m=n[2*(f*e.width+s)],w=n[2*(f*e.width+h)],g=n[2*(c*e.width+s)+1],p=n[2*(c*e.width+h)+1];return[(u*(1-l)+m*l)*(1-a)+(d*(1-l)+w*l)*a,(g*(1-l)+n[2*(f*e.width+s)+1]*l)*(1-a)+(p*(1-l)+n[2*(f*e.width+h)+1]*l)*a]}}return(t,r)=>{const o=Math.round(t),i=Math.round(r);return o<0||o>=e.width||i<0||i>=e.height?[0,0]:[n[2*(i*e.width+o)+0],n[2*(i*e.width+o)+1]]}}function f(t,e,n,r,o,i,a,l,s){const c=[];let h,f,u=n,d=r,m=0;c.push({x:u,y:d,t:m});for(let w=0;w<t.verticesPerLine;w++){let[n,r]=e(u,d);n*=t.velocityScale,r*=t.velocityScale;const w=Math.sqrt(n*n+r*r);if(w<t.minSpeedThreshold)return c;const g=n/w,p=r/w;u+=g*t.segmentLength,d+=p*t.segmentLength;if(m+=t.segmentLength/w,Math.acos(g*h+p*f)>t.maxTurnAngle)return c;if(t.mergeLines){const t=Math.round(u*s),e=Math.round(d*s);if(t<0||t>a-1||e<0||e>l-1)return c;const n=i[e*a+t];if(-1!==n&&n!==o)return c;i[e*a+t]=o}c.push({x:u,y:d,t:m}),h=g,f=p}return c}function u(t,e,n,r){const i=[],a=new o,l=1/Math.max(t.lineCollisionWidth,1),s=Math.round(n*l),c=Math.round(r*l),h=new Int32Array(s*c);for(let o=0;o<h.length;o++)h[o]=-1;const u=[];for(let o=0;o<r;o+=t.lineSpacing)for(let e=0;e<n;e+=t.lineSpacing)u.push({x:e,y:o,sort:a.getFloat()});u.sort(((t,e)=>t.sort-e.sort));for(const{x:o,y:d}of u)if(a.getFloat()<t.density){const n=f(t,e,o,d,i.length,h,s,c,l);if(n.length<2)continue;i.push(n)}return i}function d(t,e,n,r){if(0===r)return t;const o=Math.round(3*r),i=new Array(2*o+1);let a=0;for(let c=-o;c<=o;c++){const t=Math.exp(-c*c/(r*r));i[c+o]=t,a+=t}for(let c=-o;c<=o;c++)i[c+o]/=a;const l=new Float32Array(t.length);for(let c=0;c<n;c++)for(let n=0;n<e;n++){let r=0,a=0;for(let l=-o;l<=o;l++){if(n+l<0||n+l>=e)continue;const s=i[l+o];r+=s*t[2*(c*e+(n+l))+0],a+=s*t[2*(c*e+(n+l))+1]}l[2*(c*e+n)+0]=r,l[2*(c*e+n)+1]=a}const s=new Float32Array(t.length);for(let c=0;c<e;c++)for(let t=0;t<n;t++){let r=0,a=0;for(let s=-o;s<=o;s++){if(t+s<0||t+s>=n)continue;const h=i[s+o];r+=h*l[2*((t+s)*e+c)+0],a+=h*l[2*((t+s)*e+c)+1]}s[2*(t*e+c)+0]=r,s[2*(t*e+c)+1]=a}return s}function m(t,e){const n=new o,r=t.reduce(((t,e)=>t+e.length),0),i=new Float32Array(3*r),a=new Array(t.length);let l=0,s=0;for(const o of t){const t=l;for(const e of o)i[3*l+0]=e.x,i[3*l+1]=e.y,i[3*l+2]=e.t,l++;a[s++]={startVertex:t,numberOfVertices:o.length,totalTime:o[o.length-1].t,timeSeed:e?n.getFloat():0}}return{lineVertices:i,lineDescriptors:a}}function w(t,e=10){const{lineVertices:n,lineDescriptors:r}=t;let o=0,i=0;for(const s of r){o+=2*s.numberOfVertices;i+=6*(s.numberOfVertices-1)}const a=new Float32Array(o*s),l=new Uint32Array(i);let c=0,h=0;function f(){l[h++]=c-2,l[h++]=c,l[h++]=c-1,l[h++]=c,l[h++]=c+1,l[h++]=c-1}function u(t,e,n,r,o,i,l){const h=c*s;let f=0;a[h+f++]=t,a[h+f++]=e,a[h+f++]=1,a[h+f++]=n,a[h+f++]=i,a[h+f++]=l,a[h+f++]=r,a[h+f++]=o,c++,a[h+f++]=t,a[h+f++]=e,a[h+f++]=-1,a[h+f++]=n,a[h+f++]=i,a[h+f++]=l,a[h+f++]=-r,a[h+f++]=-o,c++}for(const s of r){const{totalTime:t,timeSeed:r}=s;let o=null,i=null,a=null,l=null,c=null;for(let h=0;h<s.numberOfVertices;h++){const d=n[3*(s.startVertex+h)+0],m=n[3*(s.startVertex+h)+1],w=n[3*(s.startVertex+h)+2];let g=null,p=null,y=null,x=null;if(h>0){g=d-o,p=m-i;const n=Math.sqrt(g*g+p*p);if(g/=n,p/=n,h>1){let t=g+l,n=p+c;const r=Math.sqrt(t*t+n*n);t/=r,n/=r;const o=Math.min(1/(t*g+n*p),e);t*=o,n*=o,y=-n,x=t}else y=-p,x=g;null!==y&&null!==x&&(u(o,i,a,y,x,t,r),f())}o=d,i=m,a=w,l=g,c=p}u(o,i,a,-c,l,t,r)}return{vertexData:a,indexData:l}}function g(t,n){const r=n.pixels,{width:o,height:i}=n,a=new Float32Array(o*i*2);if("vector-uv"===t)for(let e=0;e<o*i;e++)a[2*e+0]=r[0][e],a[2*e+1]=-r[1][e];else if("vector-magdir"===t)for(let l=0;l<o*i;l++){const t=r[0][l],n=e(r[1][l]),o=Math.cos(n-Math.PI/2),i=Math.sin(n-Math.PI/2);a[2*l+0]=o*t,a[2*l+1]=i*t}return{data:a,width:o,height:i}}async function p(t,e,n,r,o){const l=i(e.spatialReference);if(!l)return y(t,e,n,r,o);const[s,c]=l.valid,h=c-s,f=Math.ceil(e.width/h),u=e.width/f,d=Math.round(n/f);let m=e.xmin;const w=[];for(let i=0;i<f;i++){const n=new a({xmin:m,xmax:m+u,ymin:e.ymin,ymax:e.ymax,spatialReference:e.spatialReference});w.push(y(t,n,d,r,o)),m+=u}const g=await Promise.all(w),p={data:new Float32Array(n*r*2),width:n,height:r};let x=0;for(const i of g){for(let t=0;t<i.height;t++)for(let e=0;e<i.width;e++)x+e>=n||(p.data[2*(t*n+x+e)+0]=i.data[2*(t*i.width+e)+0],p.data[2*(t*n+x+e)+1]=i.data[2*(t*i.width+e)+1]);x+=i.width}return p}async function y(t,e,r,o,i){if("imagery"===t.type){await t.load({signal:i});const a=t.rasterInfo.dataType,l=await t.fetchImage(e,r,o,{signal:i});return!l||n(l.pixelData)||n(l.pixelData.pixelBlock)?{data:new Float32Array(r*o*2),width:r,height:o}:g(a,l.pixelData.pixelBlock)}await t.load({signal:i});const a=t.rasterInfo.dataType,l=await t.fetchPixels(e,r,o,{signal:i});return!l||n(l.pixelBlock)?{data:new Float32Array(r*o*2),width:r,height:o}:g(a,l.pixelBlock)}export{m as createAnimatedLinesData,w as createLinesMesh,c as createStreamlinesMesh,y as fetchPart,p as loadImagery};
