/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../chunks/tslib.es6.js";import t from"../../../../core/Accessor.js";import r from"../../../../core/Evented.js";import s from"../../../../core/Logger.js";import{isNone as o,isSome as i}from"../../../../core/maybe.js";import{isPromiseLike as n,isAbortError as u}from"../../../../core/promiseUtils.js";import{property as a}from"../../../../core/accessorSupport/decorators/property.js";import"../../../../core/arrayUtils.js";import"../../../../core/has.js";import"../../../../core/accessorSupport/ensureType.js";import{subclass as h}from"../../../../core/accessorSupport/decorators/subclass.js";import{TextureTechnique as c,TextureTechniqueConfiguration as p}from"./TextureTechnique.js";import{assert as d}from"./Util.js";import{TaskPriority as _}from"../../../support/Scheduler.js";const f=s.getLogger("esri.views.3d.webgl-engine.lib.TextureRepository");let m=class extends t{constructor(e,t,s){super({}),this._stage=e,this._techniqueRepository=t,this._rctx=s,this._idToRefCountedTexture=new Map,this._loadingCount=0,this._frameUpdates=new Map,this.events=new r,this._frameTask=e.resourceController.scheduler.registerTask(_.TEXTURE_UNLOAD)}normalizeCtorArgs(){return{}}dispose(){this._frameTask.remove(),this._stage.forEachOfType(4,(e=>e.unload()))}get updating(){return this._loadingCount>0||this._frameTask.updating}get textureTechnique(){return o(this._textureTechnique)&&(this._textureTechnique=this._techniqueRepository.acquire(c,new p)),this._textureTechnique}acquire(e){const t=this._idToRefCountedTexture.get(e);return t?(t.ref(),Promise.resolve(t)):this._createNewRef(e)}update(){let e=!1;this._frameUpdates.forEach((t=>{const r=t.texture.frameUpdate(this._rctx,this.textureTechnique,t.previousToken);r>=0&&r!==t.previousToken&&(t.previousToken=r,e=!0)})),e&&this.events.emit("changed",0)}async _createNewRef(e){const t=this._stage.getObject(e);if(o(t))return d(void 0!==t),null;const r=t.events.on("unloaded",(()=>{r.remove(),this._onTextureUnloaded(e)})),s=new l(e,(()=>{this._frameTask.schedule((()=>{s.isUnreferenced&&t.unload()}))}));return this._idToRefCountedTexture.set(e,s),s.ref(),i(t.glTexture)?(this._updateGLTexture(s,t.glTexture),t.requiresFrameUpdates&&this._frameUpdates.set(e,{texture:t,previousToken:-1})):(this._loadingCount++,await this._stage.schedule((()=>{const r=t.load(this._rctx,(()=>this.textureTechnique)),o=r=>(this._loadingCount--,this._updateGLTexture(s,r),t.requiresFrameUpdates&&this._frameUpdates.set(e,{texture:t,previousToken:-1}),s),i=e=>{this._loadingCount--,u(e)||f.error(e)};return n(r)?r.then(o,i):o(r)}))),s}_updateGLTexture(e,t){e.glTexture=t,this.events.emit("changed",1)}_onTextureUnloaded(e){this._idToRefCountedTexture.delete(e),this._frameUpdates.delete(e)}};e([a()],m.prototype,"_loadingCount",void 0),e([a()],m.prototype,"_frameTask",void 0),e([a()],m.prototype,"updating",null),m=e([h("esri.views.3d.webgl-engine.lib.TextureRepository")],m);class l{constructor(e,t){this.id=e,this._release=t,this._refCount=0}get isUnreferenced(){return 0===this._refCount}ref(){++this._refCount}release(){--this._refCount,this._refCount>0||(0!==this._refCount?(f.error("Cannot dereference texture that has no references!"),this._refCount=0):this._release())}}export{m as TextureRepository};
