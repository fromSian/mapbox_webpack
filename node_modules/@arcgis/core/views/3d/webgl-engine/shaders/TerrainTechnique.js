/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../chunks/tslib.es6.js";import{T as r}from"../../../../chunks/Terrain.glsl.js";import{ReloadableShaderModule as t}from"../core/shaderTechnique/ReloadableShaderModule.js";import{ShaderTechnique as i}from"../core/shaderTechnique/ShaderTechnique.js";import{parameter as o,ShaderTechniqueConfiguration as s}from"../core/shaderTechnique/ShaderTechniqueConfiguration.js";import{Default3D as n}from"../lib/DefaultVertexAttributeLocations.js";import{Program as d}from"../lib/Program.js";import{renderWhenBitIsNotSet as l}from"../lib/StencilUtils.js";import{makePipelineState as a,simpleBlendingParams as c,backFaceCullingParams as p,defaultDepthWriteParams as u,defaultColorWriteParams as h}from"../../../webgl/renderState.js";class b extends i{constructor(){super(...arguments),this.useStencil=!1}initializeProgram(e){const r=b.shader.get(),t=this.configuration,i=r.build({overlayMode:t.overlayMode,output:t.output,viewingMode:e.viewingMode,slicePlaneEnabled:t.slicePlaneEnabled,sliceHighlightDisabled:!1,sliceEnabledForVertexPrograms:!1,textureFadingEnabled:t.textureFadingEnabled&&!t.renderOccluded,hasBackgroundColor:t.hasBackgroundColor,useGrid:t.useGrid,receiveShadows:t.receiveShadows&&!t.renderOccluded,receiveAmbientOcclusion:!1,atmosphere:t.atmosphere,tileBorders:t.tileBorders,screenSizePerspective:t.screenSizePerspective,pbrMode:0,ssrEnabled:t.ssrEnabled,highStepCount:!1});return new d(e.rctx,i,n)}initializePipeline(){return this._stencilPipelineState=this.createPipeline(!0),this.createPipeline(!1)}createPipeline(e){const r=this.configuration,t=r.backfaceCullingEnabled&&!r.renderOccluded;return a({blending:r.renderOccluded?c(1,771):null,culling:t&&p,depthTest:!r.renderOccluded&&{func:513},depthWrite:!r.renderOccluded&&u,colorWrite:h,stencilTest:e?l(1):null})}getPipelineState(e,r){return this.useStencil?this._stencilPipelineState:super.getPipelineState(e,r)}}b.shader=new t(r,(()=>import("../core/shaderLibrary/terrain/Terrain.glsl.js")));class g extends s{constructor(){super(...arguments),this.output=0,this.overlayMode=0,this.atmosphere=!1,this.receiveShadows=!1,this.slicePlaneEnabled=!1,this.backfaceCullingEnabled=!1,this.stencilEnabled=!1,this.textureFadingEnabled=!1,this.hasBackgroundColor=!1,this.useGrid=!1,this.renderOccluded=!1,this.ssrEnabled=!1,this.tileBorders=!1,this.screenSizePerspective=!1}}e([o({count:8})],g.prototype,"output",void 0),e([o({count:3})],g.prototype,"overlayMode",void 0),e([o()],g.prototype,"atmosphere",void 0),e([o()],g.prototype,"receiveShadows",void 0),e([o()],g.prototype,"slicePlaneEnabled",void 0),e([o()],g.prototype,"backfaceCullingEnabled",void 0),e([o()],g.prototype,"stencilEnabled",void 0),e([o()],g.prototype,"textureFadingEnabled",void 0),e([o()],g.prototype,"hasBackgroundColor",void 0),e([o()],g.prototype,"useGrid",void 0),e([o()],g.prototype,"renderOccluded",void 0),e([o()],g.prototype,"ssrEnabled",void 0),e([o()],g.prototype,"tileBorders",void 0),e([o()],g.prototype,"screenSizePerspective",void 0);export{b as TerrainTechnique,g as TerrainTechniqueConfiguration};
