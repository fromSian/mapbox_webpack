/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
import{n as e,s as t,a as r,b as s}from"../../../../chunks/vec3.js";import{c as i}from"../../../../chunks/vec3f64.js";import{center as a,scale as n}from"../../../../geometry/support/aaBoundingBox.js";import{BufferViewVec3f as o}from"../../../../geometry/support/buffer/BufferView.js";import{newLayout as u}from"../../support/buffer/InterleavedLayout.js";import c from"../lib/GLMaterial.js";import{outputFromPass as l}from"../lib/GLMaterials.js";import{materialParametersDefaults as f,Material as h}from"../lib/Material.js";import{assert as p}from"../lib/Util.js";import{writeDefaultAttributes as m,writePosition as d}from"./internal/bufferWriterUtils.js";import{intersectTriangleGeometry as b}from"./internal/MaterialUtil.js";import{ShadedColorMaterialTechniqueConfiguration as g,ShadedColorMaterialVertexAttrLocations as v,ShadedColorMaterialTechnique as E}from"../shaders/ShadedColorMaterialTechnique.js";class q extends h{constructor(e){super(e,C),this.supportsEdges=!0,this.techniqueConfig=new g,this._vertexAttributeLocations=v}getTechniqueConfig(e,t){return this.techniqueConfig.output=e,this.techniqueConfig.cullFace=this.parameters.cullFace,this.techniqueConfig.slicePlaneEnabled=this.parameters.slicePlaneEnabled,this.techniqueConfig.transparent=this.parameters.transparent,this.techniqueConfig.writeDepth=this.parameters.writeDepth,this.techniqueConfig.screenSizeEnabled=this.parameters.screenSizeEnabled,this.techniqueConfig.shadingEnabled=this.parameters.shadingEnabled,this.techniqueConfig.transparencyPassType=t.transparencyPassType,this.techniqueConfig.multipassTerrainEnabled=t.multipassTerrainEnabled,this.techniqueConfig.cullAboveGround=t.cullAboveGround,this.techniqueConfig}getPassParameters(){return this.parameters}intersect(e,i,o,u,c,l,f){if(this.parameters.screenSizeEnabled){const o=e.vertexAttributes.get("offset"),h={applyToVertex:(e,i,a,n)=>{const c=t(z,o.data[3*n+0],o.data[3*n+1],o.data[3*n+2]),l=t(w,e,i,a);return r(c,c,this.parameters.screenSize*u.camera.computeRenderPixelSizeAt(c)),s(l,l,c),[l[0],l[1],l[2]]},applyToAabb:e=>{const t=a(e,z);return n(e,this.parameters.screenSize*u.camera.computeRenderPixelSizeAt(t))}};b(e,i,u,c,l,h,f)}else b(e,i,u,c,l,void 0,f)}requiresSlot(e,t){if(4===l(t))return 2===e;let r=2;return this.parameters.transparent&&(r=this.parameters.writeDepth?4:7),e===r||20===e}createGLMaterial(e){return 0===e.output||7===e.output||4===e.output?new S(e):null}createBufferWriter(){return new x(this.parameters.screenSizeEnabled)}}class S extends c{updateParameters(e){return this.ensureTechnique(E,e)}beginSlot(e){return this.updateParameters(e)}bind(e,t){t.bindPass(this._material.getPassParameters(),e)}}const C={color:[1,1,1,1],shadingTint:[0,0,0,.25],shadingDirection:e(i(),[.5,-.5,-.5]),transparent:!1,writeDepth:!0,slicePlaneEnabled:!1,cullFace:0,screenSizeEnabled:!1,screenSize:14,shadingEnabled:!0,...f};class x{constructor(e){this.screenSizeEnabled=e;const t=u().vec3f("position").vec3f("normal");this.screenSizeEnabled&&t.vec3f("offset"),this.vertexBufferLayout=t}allocate(e){return this.vertexBufferLayout.createBuffer(e)}elementCount(e){return e.indices.get("position").length}write(e,t,r,s){if(m(t,this.vertexBufferLayout,e.transformation,e.invTranspTransformation,r,s),this.screenSizeEnabled){if(!t.vertexAttributes.has("offset"))throw new Error("offset vertex attribute required for screenSizeEnabled ShadedColorMaterial");{const i=t.vertexAttributes.get("offset"),a=t.indices.get("offset");p(3===i.size);const n=r.getField("offset",o);if(!n)throw new Error("unable to acquire view for offset");d(a,i.data,e.invTranspTransformation,n,s)}}}}const z=i(),w=i();export{q as ShadedColorMaterial};
