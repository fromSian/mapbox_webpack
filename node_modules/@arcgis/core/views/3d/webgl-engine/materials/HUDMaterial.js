/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
import{clamp as e}from"../../../../core/mathUtils.js";import{isSome as t}from"../../../../core/maybe.js";import{createRenderScreenPointArray3 as s}from"../../../../core/screenUtils.js";import{f as r}from"../../../../chunks/mat3.js";import{c as i}from"../../../../chunks/mat3f64.js";import{b as n}from"../../../../chunks/mat4.js";import{c as a}from"../../../../chunks/mat4f64.js";import{c as o}from"../../../../chunks/vec2.js";import{a as c,f as l}from"../../../../chunks/vec2f64.js";import{s as f,m as u,n as p,f as m,a as d,g as h,l as g,i as v,t as x,d as b,b as S}from"../../../../chunks/vec3.js";import{c as y,f as z}from"../../../../chunks/vec3f64.js";import{isMat4 as O}from"../../../../core/libs/gl-matrix-2/types/mat4.js";import{create as P}from"../../../../geometry/support/aaBoundingRect.js";import{newLayout as A}from"../../support/buffer/InterleavedLayout.js";import{computeAttachmentOriginPoints as C}from"../lib/geometryDataUtils.js";import{outputFromPass as q}from"../lib/GLMaterials.js";import w from"../lib/GLMaterialTexture.js";import{Material as T,materialParametersDefaults as j}from"../lib/Material.js";import{applyScaleFactor as M,applyPrecomputedScaleFactor as D,precomputeScaleFactor as E}from"../lib/screenSizePerspectiveUtils.js";import{assert as V}from"../lib/Util.js";import{writePosition as G,writeNormal as I,writeColor as U,writeBufferVec4 as B}from"./internal/bufferWriterUtils.js";import{verticalOffsetAtDistance as R}from"./internal/MaterialUtil.js";import{isInstanceHidden as H}from"./renderers/utils.js";import{c as k}from"../../../../chunks/HUDMaterial.glsl.js";import{HUDMaterialTechniqueConfiguration as F,HUDMaterialTechnique as L}from"../shaders/HUDMaterialTechnique.js";class W extends T{constructor(e){super(e,me),this.techniqueConfig=new F}getTechniqueConfig(e,t){return this.techniqueConfig.output=e,this.techniqueConfig.slicePlaneEnabled=this.parameters.slicePlaneEnabled,this.techniqueConfig.verticalOffset=!!this.parameters.verticalOffset,this.techniqueConfig.screenSizePerspective=!!this.parameters.screenSizePerspective,this.techniqueConfig.screenCenterOffsetUnitsEnabled="screen"===this.parameters.centerOffsetUnits?1:0,this.techniqueConfig.polygonOffsetEnabled=this.parameters.polygonOffset,this.techniqueConfig.isDraped=this.parameters.isDraped,this.techniqueConfig.occlusionTestEnabled=this.parameters.occlusionTest,this.techniqueConfig.pixelSnappingEnabled=this.parameters.pixelSnappingEnabled,this.techniqueConfig.sdf=this.parameters.textureIsSignedDistanceField,this.techniqueConfig.vvSize=!!this.parameters.vvSizeEnabled,this.techniqueConfig.vvColor=!!this.parameters.vvColorEnabled,0===e&&(this.techniqueConfig.debugDrawBorder=!!this.parameters.debugDrawBorder),4===e&&(this.techniqueConfig.binaryHighlightOcclusion=this.parameters.binaryHighlightOcclusion),this.techniqueConfig.depthEnabled=this.parameters.depthEnabled,this.techniqueConfig.transparencyPassType=t.transparencyPassType,this.techniqueConfig.multipassGeometryEnabled=t.multipassGeometryEnabled,this.techniqueConfig.multipassTerrainEnabled=t.multipassTerrainEnabled,this.techniqueConfig.cullAboveGround=t.cullAboveGround,this.techniqueConfig}intersect(e,s,r,i,n,a,o,c,l){t(l)?this.intersectDrapedHudGeometry(e,a,o,c,l):this.intersectHudGeometry(e,s,r,i,o,c)}intersectDrapedHudGeometry(e,s,r,i,n){const a=e.vertexAttributes.get("position"),o=e.vertexAttributes.get("size"),c=this.parameters,l=k(c);let f=1,u=1;if(t(i)){const e=i(ce);f=e[0],u=e[5]}f*=e.screenToWorldRatio,u*=e.screenToWorldRatio;const p=fe*e.screenToWorldRatio;for(let t=0;t<a.data.length/a.size;t++){const i=t*a.size,m=a.data[i],d=a.data[i+1],h=t*o.size;let g;ue[0]=o.data[h]*f,ue[1]=o.data[h+1]*u,c.textureIsSignedDistanceField&&(g=c.outlineSize*e.screenToWorldRatio/2),Q(s,m,d,ue,p,g,c,l)&&r(n.dist,n.normal,-1,!0)}}intersectHudGeometry(e,s,i,a,o,c){if(!a.options.selectionMode||!a.options.hud||H(s))return;const l=this.parameters;let x=1,b=1;if(r(re,i),t(c)){const e=c(ce);x=e[0],b=e[5],K(re)}const S=e.vertexAttributes.get("position"),z=e.vertexAttributes.get("size"),O=e.vertexAttributes.get("normal"),P=e.vertexAttributes.get("auxpos1");V(S.size>=3);const A=a.point,C=a.camera,q=k(l);x*=C.pixelRatio,b*=C.pixelRatio;const w="screen"===this.parameters.centerOffsetUnits;for(let t=0;t<S.data.length/S.size;t++){const e=t*S.size;f(Z,S.data[e],S.data[e+1],S.data[e+2]),u(Z,Z,i);const s=t*z.size;ue[0]=z.data[s]*x,ue[1]=z.data[s+1]*b,u(Z,Z,C.viewMatrix);const r=t*P.size;if(f(ae,P.data[r+0],P.data[r+1],P.data[r+2]),!w&&(Z[0]+=ae[0],Z[1]+=ae[1],0!==ae[2])){const e=ae[2];p(ae,Z),m(Z,Z,d(ae,ae,e))}const c=t*O.size;if(f($,O.data[c],O.data[c+1],O.data[c+2]),this.normalAndViewAngle($,re,C,oe),this.applyVerticalOffsetTransformationView(Z,oe,C,X),C.applyProjection(Z,ee),ee[0]>-1){let e=Math.floor(ee[0])+this.parameters.screenOffset[0],t=Math.floor(ee[1])+this.parameters.screenOffset[1];w&&(e+=ae[0],0!==ae[1]&&(t+=M(ae[1],X.factorAlignment))),D(ue,X.factor,ue);const s=le*C.pixelRatio;let r;if(l.textureIsSignedDistanceField&&(r=l.outlineSize*C.pixelRatio/2),Q(A,e,t,ue,s,r,l,q)){const e=a.ray;if(u(se,Z,n(ne,C.viewMatrix)),ee[0]=A[0],ee[1]=A[1],C.unprojectFromRenderScreen(ee,Z)){const t=y();h(t,e.direction);const s=1/g(t);d(t,t,s);o(v(e.origin,Z)*s,t,-1,!0,1,se)}}}}}computeAttachmentOrigin(e,t){const s=e.vertexAttributes;if(!s)return!1;const r=s.get("position"),i=e.indices.get("position");return C(r,i,t)}createBufferWriter(){return new he(this)}normalAndViewAngle(e,t,s,i){return O(t)&&(t=r(ie,t)),x(i.normal,e,t),u(i.normal,i.normal,s.viewInverseTransposeMatrix),i.cosAngle=b(te,pe),i}updateScaleInfo(e,t,s){const r=this.parameters;r.screenSizePerspective?E(s,t,r.screenSizePerspective,e.factor):(e.factor.scale=1,e.factor.factor=0,e.factor.minPixelSize=0,e.factor.paddingPixels=0),r.screenSizePerspectiveAlignment?E(s,t,r.screenSizePerspectiveAlignment,e.factorAlignment):(e.factorAlignment.factor=e.factor.factor,e.factorAlignment.scale=e.factor.scale,e.factorAlignment.minPixelSize=e.factor.minPixelSize,e.factorAlignment.paddingPixels=e.factor.paddingPixels)}applyShaderOffsetsView(e,t,s,r,i,n,a){const o=this.normalAndViewAngle(t,s,i,oe);return this.applyVerticalGroundOffsetView(e,o,i,a),this.applyVerticalOffsetTransformationView(a,o,i,n),this.applyPolygonOffsetView(a,o,r[3],i,a),this.applyCenterOffsetView(a,r,a),a}applyShaderOffsetsNDC(e,s,r,i,n){return this.applyCenterOffsetNDC(e,s,r,i),t(n)&&h(n,i),this.applyPolygonOffsetNDC(i,s,r,i),i}applyPolygonOffsetView(t,s,r,i,n){const a=i.aboveGround?1:-1;let o=Math.sign(r);0===o&&(o=a);const c=a*o;if(this.parameters.shaderPolygonOffset<=0)return h(n,t);const l=e(Math.abs(s.cosAngle),.01,1),f=1-Math.sqrt(1-l*l)/l/i.viewport[2];return d(n,t,c>0?f:1/f),n}applyVerticalGroundOffsetView(e,t,s,r){const i=g(e),n=s.aboveGround?1:-1,a=.5*s.computeRenderPixelSizeAtDist(i),o=d(Z,t.normal,n*a);return S(r,e,o),r}applyVerticalOffsetTransformationView(e,t,s,r){const i=this.parameters;if(!i.verticalOffset||!i.verticalOffset.screenLength){if(i.screenSizePerspective||i.screenSizePerspectiveAlignment){const s=g(e);this.updateScaleInfo(r,s,t.cosAngle)}else r.factor.scale=1,r.factorAlignment.scale=1;return e}const n=g(e),a=i.screenSizePerspectiveAlignment||i.screenSizePerspective,o=R(s,n,i.verticalOffset,t.cosAngle,a);return this.updateScaleInfo(r,n,t.cosAngle),d(t.normal,t.normal,o),S(e,e,t.normal)}applyCenterOffsetView(e,t,s){const r="screen"!==this.parameters.centerOffsetUnits;return s!==e&&h(s,e),r&&(s[0]+=t[0],s[1]+=t[1],t[2]&&(p($,s),S(s,s,d($,$,t[2])))),s}applyCenterOffsetNDC(e,t,s,r){const i="screen"!==this.parameters.centerOffsetUnits;return r!==e&&h(r,e),i||(r[0]+=t[0]/s.fullWidth*2,r[1]+=t[1]/s.fullHeight*2),r}applyPolygonOffsetNDC(e,t,s,r){const i=this.parameters.shaderPolygonOffset;if(e!==r&&h(r,e),i){const e=s.aboveGround?1:-1,n=e*Math.sign(t[3]);r[2]-=(n||e)*i}return r}requiresSlot(e,t){const s=q(t);if(0===s||7===s){if(20===e)return!0;const t=this.parameters.drawInSecondSlot?17:16;return this.parameters.occlusionTest&&11===e||e===t}return e===(this.parameters.drawInSecondSlot?17:16)||20===e}createGLMaterial(e){return 0===e.output||7===e.output?new N(e):4===e.output?new _(e):null}calculateRelativeScreenBounds(e,t,s=P()){return J(this.parameters,e,t,s),s[2]=s[0]+e[0],s[3]=s[1]+e[1],s}}class _ extends w{constructor(e){super({...e,...e.material.parameters})}updateParameters(e){return this.updateTexture(this._material.parameters.textureId),this.selectProgram(e)}selectProgram(e){return this.ensureTechnique(L,e)}beginSlot(e){return this.updateParameters(e)}bind(e,t){this.bindTextures(t.program),this.bindTextureScale(t.program),t.bindPass(this._material.parameters,e)}}class N extends _{isOcclusionSlot(e){return 11===e.slot&&this._material.parameters.occlusionTest&&(0===this._output||7===this._output)}selectProgram(e){return this.ensureTechnique(L,e,this.isOcclusionSlot(e)?6:this._output)}bind(e,t){this.isOcclusionSlot(e)||(this.bindTextures(t.program),this.bindTextureScale(t.program)),t.bindPass(this._material.parameters,e)}}function J(e,t,s,r=Y){return o(r,e.anchorPos),r[0]*=-t[0],r[1]*=-t[1],r[0]+=e.screenOffset[0]*s,r[1]+=e.screenOffset[1]*s,r}function K(e){const t=e[0],s=e[1],r=e[2],i=e[3],n=e[4],a=e[5],o=e[6],c=e[7],l=e[8],f=1/Math.sqrt(t*t+s*s+r*r),u=1/Math.sqrt(i*i+n*n+a*a),p=1/Math.sqrt(o*o+c*c+l*l);return e[0]=t*f,e[1]=s*f,e[2]=r*f,e[3]=i*u,e[4]=n*u,e[5]=a*u,e[6]=o*p,e[7]=c*p,e[8]=l*p,e}function Q(e,t,s,r,i,n,a,o){let c=t-i-(o[0]>0?r[0]*o[0]:0),l=c+r[0]+2*i,f=s-i-(o[1]>0?r[1]*o[1]:0),u=f+r[1]+2*i;if(a.textureIsSignedDistanceField){const e=a.distanceFieldBoundingBox;c+=r[0]*e[0],f+=r[1]*e[1],l-=r[0]*(1-e[2]),u-=r[1]*(1-e[3]),c-=n,l+=n,f-=n,u+=n}return e[0]>c&&e[0]<l&&e[1]>f&&e[1]<u}const X={factor:{scale:0,factor:0,minPixelSize:0,paddingPixels:0},factorAlignment:{scale:0,factor:0,minPixelSize:0,paddingPixels:0}},Y=c(),Z=y(),$=y(),ee=s(),te=y(),se=y(),re=i(),ie=i(),ne=a(),ae=y(),oe={normal:te,cosAngle:0},ce=a(),le=1,fe=2,ue=[0,0],pe=z(0,0,1),me={texCoordScale:[1,1],occlusionTest:!0,binaryHighlightOcclusion:!0,drawInSecondSlot:!1,color:[1,1,1,1],outlineColor:[1,1,1,1],outlineSize:0,textureIsSignedDistanceField:!1,distanceFieldBoundingBox:null,vvSizeEnabled:!1,vvSizeMinSize:[1,1,1],vvSizeMaxSize:[100,100,100],vvSizeOffset:[0,0,0],vvSizeFactor:[1,1,1],vvColorEnabled:!1,vvColorValues:[0,0,0,0,0,0,0,0],vvColorColors:[1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0],screenOffset:[0,0],verticalOffset:null,screenSizePerspective:null,screenSizePerspectiveAlignment:null,slicePlaneEnabled:!1,anchorPos:l(.5,.5),shaderPolygonOffset:1e-5,polygonOffset:!1,textureId:null,centerOffsetUnits:"world",depthEnabled:!0,pixelSnappingEnabled:!0,debugDrawBorder:!1,isDraped:!1,...j},de=A().vec3f("position").vec3f("normal").vec2f("uv0").vec4u8("color").vec2f("size").vec4f("auxpos1").vec4f("auxpos2");class he{constructor(e){this.material=e,this.vertexBufferLayout=de}allocate(e){return this.vertexBufferLayout.createBuffer(e)}elementCount(e){return 6*e.indices.get("position").length}write(e,t,s,r){G(t.indices.get("position"),t.vertexAttributes.get("position").data,e.transformation,s.position,r,6),I(t.indices.get("normal"),t.vertexAttributes.get("normal").data,e.invTranspTransformation,s.normal,r,6);{const e=t.vertexAttributes.get("uv0").data;let i,n,a,o;if(null==e||e.length<4){const e=this.material.parameters;i=0,n=0,a=e.texCoordScale[0],o=e.texCoordScale[1]}else i=e[0],n=e[1],a=e[2],o=e[3];a=Math.min(1.99999,a+1),o=Math.min(1.99999,o+1);const c=t.indices.get("position").length,l=s.uv0;let f=r;for(let t=0;t<c;++t)l.set(f,0,i),l.set(f,1,n),f+=1,l.set(f,0,a),l.set(f,1,n),f+=1,l.set(f,0,a),l.set(f,1,o),f+=1,l.set(f,0,a),l.set(f,1,o),f+=1,l.set(f,0,i),l.set(f,1,o),f+=1,l.set(f,0,i),l.set(f,1,n),f+=1}U(t.indices.get("color"),t.vertexAttributes.get("color").data,4,s.color,r,6);{const e=t.indices.get("size"),i=t.vertexAttributes.get("size").data,n=e.length,a=s.size;let o=r;for(let t=0;t<n;++t){const s=i[2*e[t]],r=i[2*e[t]+1];for(let e=0;e<6;++e)a.set(o,0,s),a.set(o,1,r),o+=1}}t.indices.get("auxpos1")&&t.vertexAttributes.get("auxpos1")&&B(t.indices.get("auxpos1"),t.vertexAttributes.get("auxpos1").data,s.auxpos1,r,6),t.indices.get("auxpos2")&&t.vertexAttributes.get("auxpos2")&&B(t.indices.get("auxpos2"),t.vertexAttributes.get("auxpos2").data,s.auxpos2,r,6)}}export{W as HUDMaterial};
