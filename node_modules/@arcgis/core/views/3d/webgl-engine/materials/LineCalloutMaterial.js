/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
import{f as e}from"../../../../chunks/vec2f32.js";import{newLayout as t}from"../../support/buffer/InterleavedLayout.js";import i from"../lib/GLMaterial.js";import{Material as r,materialParametersDefaults as s}from"../lib/Material.js";import{writePosition as n,writeNormal as a,writeBufferVec4 as u}from"./internal/bufferWriterUtils.js";import{LineCalloutTechniqueConfiguration as o,LineCalloutTechnique as l}from"../shaders/LineCalloutTechnique.js";class c extends r{constructor(e){super(e,h),this.techniqueConfig=new o,this._uniqueMaterialIdentifier=c.uniqueMaterialIdentifier(this.parameters)}get uniqueMaterialIdentifier(){return this._uniqueMaterialIdentifier}getPassParameters(){return this.parameters}getTechniqueConfig(e,t){const i=18!==(null==t?void 0:t.slot);return this.techniqueConfig.occlusionTestEnabled=this.parameters.occlusionTest,this.techniqueConfig.verticalOffset=!!this.parameters.verticalOffset,this.techniqueConfig.screenSizePerspective=!!this.parameters.screenSizePerspective,this.techniqueConfig.depthHudEnabled=i,this.techniqueConfig.depthHudAlignStartEnabled=!!this.parameters.depthHUDAlignStart,this.techniqueConfig.screenCenterOffsetUnitsEnabled="screen"===this.parameters.centerOffsetUnits?1:0,this.techniqueConfig.slicePlaneEnabled=this.parameters.slicePlaneEnabled,this.techniqueConfig.multipassGeometryEnabled=!!t&&t.multipassGeometryEnabled,this.techniqueConfig}intersect(){}requiresSlot(e){switch(e){case 18:case 19:return!0}return!1}createGLMaterial(e){return 0===e.output?new f(e):null}createBufferWriter(){return new m}validateParameters(e){const t=c.uniqueMaterialIdentifier(e);t!==this._uniqueMaterialIdentifier&&(this._uniqueMaterialIdentifier=t)}static uniqueMaterialIdentifier(e){return JSON.stringify({screenOffset:e.screenOffset||[0,0],centerOffsetUnits:e.centerOffsetUnits||"world"})}}class f extends i{updateParameters(e){return this.ensureTechnique(l,e)}beginSlot(e){return this.updateParameters(e)}bind(e,t){t.bindPass(this._material.getPassParameters(),e)}}const h={verticalOffset:null,screenSizePerspective:null,screenOffset:[0,0],color:[0,0,0,1],size:1,borderColor:null,occlusionTest:!1,shaderPolygonOffset:1e-5,depthHUDAlignStart:!1,centerOffsetUnits:"world",slicePlaneEnabled:!1,...s},d=t().vec3f("position").vec3f("normal").vec2f("uv0").vec4f("auxpos1"),p=[e(0,0),e(1,0),e(0,1),e(1,0),e(1,1),e(0,1)];class m{constructor(){this.vertexBufferLayout=d}allocate(e){return this.vertexBufferLayout.createBuffer(e)}elementCount(e){return 6*e.indices.get("position").length}write(e,t,i,r){n(t.indices.get("position"),t.vertexAttributes.get("position").data,e.transformation,i.position,r,6),a(t.indices.get("normal"),t.vertexAttributes.get("normal").data,e.invTranspTransformation,i.normal,r,6),u(t.indices.get("auxpos1"),t.vertexAttributes.get("auxpos1").data,i.auxpos1,r,6);for(let s=0;s<p.length;++s)i.uv0.setVec(r+s,p[s])}}export{c as LineCalloutMaterial};
