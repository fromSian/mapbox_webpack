/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
import{isNone as e,isSome as t,unwrapOr as r}from"../../../../core/maybe.js";import i from"../../../../core/PooledArray.js";import{castRenderScreenPointArray3 as n,createRenderScreenPointArray3 as s}from"../../../../core/screenUtils.js";import{b as o,n as a,a as c,l,i as d}from"../../../../chunks/vec3.js";import{c as h}from"../../../../chunks/vec3f64.js";import{create as u}from"../../../../geometry/support/ray.js";import{sv3d as m}from"../../../../geometry/support/vectorStacks.js";import{fromRenderAtEye as y,fromScreen as p}from"../../support/geometryUtils/ray.js";import{DEFAULT_TOLERANCE as g,newIntersector as v}from"../../webgl-engine/lib/Intersector.js";import{isValidIntersectorResult as f,isHudIntersectorResult as R,sliceFilterPredicate as x}from"../../webgl-engine/lib/intersectorUtils.js";class w{constructor(e,t,r){this.viewingMode=e,this._forEachLayer=t,this.view=r,this.externalIntersectionHandlers=new i,this.tolerance=g,this.tmpRay=u(),this.validateHUDIntersector=v(this.viewingMode),this.validateHUDIntersector.options.hud=!1}intersectScreen(e,t){return this.intersectRay(this._getPickRay(e,this.tmpRay),b(this.viewingMode),t)}intersectScreenFreePointFallback(e,t){return this.intersectRayFreePointFallback(this._getPickRay(e,this.tmpRay),t)}intersectRayFreePointFallback(e,t){return this.intersectRay(e,b(this.viewingMode),t)||this._intersectRayFreePointLocal(e,t)}intersectRay(e,t,r,i){return t.options.selectionMode=!1,t.options.store=0,this.computeIntersection(e,t,i),!!t.results.min&&t.results.min.getIntersectionPoint(r)}getCenterRayWithSubpixelOffset(e,t,r=.5,i=.5){return e.getRenderCenter(H,r,i),H[0]+=.0466,H[1]-=.0123,y(e,H,t)}intersectIntersectorScreen(e,t,r){this.computeIntersection(this._getPickRay(e,this.tmpRay),t,r)}intersectToolIntersectorScreen(e,t,r){const i=this._getPickRay(e,this.tmpRay);this.intersectToolIntersectorRay(i,t,r)}intersectToolIntersectorRay(e,t,r){t.options.selectionMode=!0,this.computeIntersection(e,t,r);const i=t.results.min;!!this.view.basemapTerrain&&this.view.basemapTerrain.opaque||f(i)&&2!==i.intersector||(t.options.selectionMode=!1,this.computeIntersection(e,t,r))}setTolerance(e=g){this.tolerance=e}addIntersectionHandler(e){this.externalIntersectionHandlers.push(e),this.externalIntersectionHandlers.sort(((e,t)=>2===e.type?1:2===t.type?-1:0))}removeIntersectionHandler(e){this.externalIntersectionHandlers.removeUnordered(e),this.externalIntersectionHandlers.sort(((e,t)=>2===e.type?1:2===t.type?-1:0))}_getPickRay(e,t){const r=this.view.state.camera;return p(r,e,t)}_intersectRayFreePointLocal(t,r){if(2!==this.viewingMode||e(t))return!1;const i=this.view.renderDataExtent;if(e(i))return o(r,t.origin,a(m.get(),t.direction)),!0;const n={x:i.xmax-i.xmin,y:i.ymax-i.ymin,z:8*Math.max(i.xmax-i.xmin,i.ymax-i.ymin)},s=Math.max(n.x,n.y,n.z);if(0===s)return o(r,t.origin,a(m.get(),t.direction)),!0;const d=this.view.state.camera,h=Math.max(0,i.xmin-d.eye[0],d.eye[0]-i.xmax),u=Math.max(0,i.ymin-d.eye[1],d.eye[1]-i.ymax),y=Math.sqrt(h*h+u*u),p=Math.abs(d.relativeElevation)+Number.MIN_VALUE,g=Math.max(0,Math.log(s/p))**2;let v=s/Math.max(1,g);v=Math.max(v,Math.min(y,s));const f=c(m.get(),t.direction,v/l(t.direction));return o(r,t.origin,f),!0}intersectElevationFromScreen(e,t,r=0,i=null){return this.intersectElevation(this._getPickRay(e,this.tmpRay),t,r,i)}intersectElevation(i,s,a=0,c=null){if(e(i))return null;const l=t(s)?s.mode:"absolute-height",d=t(s)?r(s.offset,0):0,h="on-the-ground"!==l?d+a:0,u=h/this.view.renderCoordsHelper.unitInMeters;if("absolute-height"===l){if(this.view.renderCoordsHelper.intersectInfiniteManifold(i,h,U)){const e=this.view.computeMapPointFromVec3d(U);return e.z-=d,e}return null}const y=this.view.state.camera,p=n(m.get());y.projectToRenderScreen(i.origin,p);const g=new M(null,this._forEachLayer),f=this.view.slicePlane,R=t(f)?x(f):null,w=v(this.viewingMode);w.options.store=0,w.options.verticalOffset=u;const I=i.origin,b=o(m.get(),I,i.direction);w.reset(I,b,y),w.point=p;const P=t(c)?"type"in c&&"graphics"===c.type?e=>e.metadata.layerUid!==c.uid:e=>e.metadata.graphicUid!==c.uid:null;switch(l){case"relative-to-scene":{const t=t=>(e(P)||P(t))&&t.metadata&&t.metadata.isElevationSource;w.intersect(g.layers,p,this.tolerance,null,t),this.externalIntersectionHandlers.forAll((e=>{if(4===e.type||2===e.type){const t=e.slicePlaneEnabled?R:null;e.intersect(w,t,w.rayBegin,w.rayEnd,p)}}))}break;case"on-the-ground":case"relative-to-ground":this.externalIntersectionHandlers.forAll((e=>{if(e.isGround){const t=e.slicePlaneEnabled?R:null;e.intersect(w,t,w.rayBegin,w.rayEnd,p)}}))}if(w.results.min.getIntersectionPoint(U)){const e=this.view.computeMapPointFromVec3d(U);return e.z=a,e}return null}computeIntersection(i,s,a){if(e(i))return;const c=this.view.state.camera,l=n(m.get());c.projectToRenderScreen(i.origin,l);const h=new M(a,this._forEachLayer);s.options.selectOpaqueTerrainOnly=!a||!("include"in a||"exclude"in a);const u=i.origin,y=o(m.get(),i.origin,i.direction);s.reset(u,y,c),s.intersect(h.layers,l,this.tolerance);const p=this.view.slicePlane,g=t(p)?x(p):null;s.intersect(h.sliceableLayers,l,this.tolerance,g);const v=a&&(a.requiresGroundFeedback||a.enableDraped);this.externalIntersectionHandlers.forAll((e=>{if(s.options.isFiltered=!h.filterLayerUid(e.layerUid),e.isGround&&v||!s.options.isFiltered){const t=e.slicePlaneEnabled?g:null;e.intersect(s,t,u,y,l)}}));const f=m.get();if(a&&a.enableDraped&&s.results.ground.getIntersectionPoint(f)){const e=this.view.basemapTerrain.overlayManager.renderer,t=this.view.renderCoordsHelper.spatialReference,i=m.get();this.view.renderCoordsHelper.fromRenderCoords(f,i,this.view.spatialReference),i[2]=r(this.view.elevationProvider.getElevation(f[0],f[1],f[2],t,"ground"),0),e.intersect(s,i,s.results.ground,(e=>h.filterRenderGeometry(e)))}s.sortResults();const w=s.results.hud;if(R(w)){const e=n(m.get()),t=m.get(),r=m.get();this.unprojectHUDResultRay(w.target.center,e,t,r);const i=d(w.target.center,t)/d(t,r)*.99;this.validateHUDIntersector.reset(t,r,c),this.validateHUDIntersector.intersect(h.layers,e,this.tolerance),this.validateHUDIntersector.intersect(h.sliceableLayers,e,this.tolerance,g),this.externalIntersectionHandlers.forAll((i=>{if(!h.filterLayerUid(i.layerUid))return;const n=i.slicePlaneEnabled?g:null;i.intersect(this.validateHUDIntersector,n,t,r,e)}));const o=this.validateHUDIntersector.results.min;(null==o.dist||i<=o.dist)&&(s.results.min.copy(w),s.results.all.splice(0,0,w))}}unprojectHUDResultRay(e,t,r,i){const s=this.view.state.camera;s.projectToRenderScreen(e,t);const o=n(m.get());o[0]=t[0],o[1]=t[1],o[2]=0,s.unprojectFromRenderScreen(o,r),o[2]=1,s.unprojectFromRenderScreen(o,i)}}let I;function b(e){return I&&I.viewingMode===e||(I=v(e)),I}class M{constructor(e,t){this.layers=new Array,this.sliceableLayers=new Array,this.include=null==e?void 0:e.include,this.exclude=null==e?void 0:e.exclude,t((e=>{e.isPickable&&this.filterLayerUid(e.apiLayerUid)&&(e.isSliceable?this.sliceableLayers:this.layers).push(e)}))}filterLayerUid(t){const{include:r,exclude:i}=this;return e(t)?null==r&&null==i:(null==r||r.has(t))&&(null==i||!i.has(t))}filterRenderGeometry(e){return this.filterLayerUid(e.layerUid)}}function P(e){return"object"==typeof e&&"intersect"in e}const U=h(),H=s();export{w as SceneIntersectionHelper,P as isIntersectionHandler};
