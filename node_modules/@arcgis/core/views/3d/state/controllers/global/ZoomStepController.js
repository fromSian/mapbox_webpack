/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
import{_ as t}from"../../../../../chunks/tslib.es6.js";import i from"../../../../../core/has.js";import{Milliseconds as e}from"../../../../../core/time.js";import"../../../../../core/Logger.js";import"../../../../../core/accessorSupport/ensureType.js";import"../../../../../core/arrayUtils.js";import"../../../../../core/accessorSupport/set.js";import{subclass as r}from"../../../../../core/accessorSupport/decorators/subclass.js";import{g as s,l as o,f as a,a as n,b as m,h as c,n as h}from"../../../../../chunks/vec3.js";import{c as p}from"../../../../../chunks/vec3f64.js";import{getReferenceEllipsoid as l}from"../../../../../geometry/projectionEllipsoid.js";import{c as y}from"../../../../../chunks/sphere.js";import{applyAll as f}from"../../../camera/constraintUtils.js";import{PointToPointAnimationController as u}from"../PointToPointAnimationController.js";import{decideNavigationMode as g,NavigationMode as w,panToPosition as d}from"../../utils/navigationUtils.js";import{fromScreenAtEye as j}from"../../../support/geometryUtils/ray.js";import{intersectScreen as C}from"../../../support/geometryUtils/sphere.js";import D from"../../../webgl-engine/lib/Camera.js";import{newIntersector as v}from"../../../webgl-engine/lib/Intersector.js";import{outExpo as R}from"../../../../animation/easing.js";import{applySurfaceCollisionConstraint as b}from"../../../camera/constraintUtils/surfaceCollision.js";const S=.6,z=4,M=12,L=60,V=20;let x=class extends u{constructor(){super(...arguments),this.zoomLocation=p(),this.tmpCamera=new D,this.tmpViewDir=p(),this.tmpRayDir={origin:p(),direction:p()},this.targetOnSphere=p(),this.tmpCenter=p(),this.constraintOptions={selection:7,interactionType:1,interactionFactor:null,interactionStartCamera:new D,interactionDirection:null,tiltMode:0},this.sphere=y()}initialize(){this.intersector=v(this.view.state.viewingMode)}zoomStep(t,i){if(!this.active)return;const e=this.view.state,{interactionStartCamera:r}=this.constraintOptions;this.animation.finished?r.copyFrom(e.camera):this.animation.cameraAt(1,r);let o=!1,a=!1;this.intersectionHelper.intersectScreen(i,this.zoomLocation)&&(o=t>0,a=!0),this.tmpCamera.copyFrom(e.camera),o?this.intersectionHelper.intersectRay(this.tmpCamera.ray,this.intersector,this.tmpCenter)&&(this.tmpCamera.center=this.tmpCenter):this.intersectionHelper.intersectRay(this.tmpCamera.ray,this.intersector,this.zoomLocation)?this.tmpCamera.center=this.zoomLocation:s(this.zoomLocation,this.tmpCamera.center),this.updateCamera(this.tmpCamera,t,this.zoomLocation,i,a),this.begin(this.tmpCamera)}animationSettings(){return{apex:null,duration:e(600),easing:R}}updateCamera(t,e,r,s,p){const y=l(this.view.spatialReference);if(g(t,s,p,y)===w.Horizontal||i("disable-feature:context-navigation")){let i=S**e;this.sphere[3]=o(r),a(this.tmpViewDir,t.center,t.eye);const h=o(this.tmpViewDir);let p=h*i;if(i<=1&&p<z&&(p=z,i=p/h),Math.abs(h-p)<1e-6)return;const l=o(t.center);if(this.sphere[3]!==l){const e=this.sphere[3]+i*(l-this.sphere[3]);t.center=n(O,t.center,e/l)}n(this.tmpViewDir,this.tmpViewDir,-i),t.eye=m(O,t.center,this.tmpViewDir),f(this.view,t,this.constraintOptions),c(r,t.center)>1e-12&&C(this.sphere,t,s,this.targetOnSphere)&&d(this.sphere,t,r,this.targetOnSphere,this.view.camera.heading,this.view.camera.tilt,!0)}else{let i=S**Math.abs(e);const o=e>0?1:-1;let a;j(t,s,this.tmpRayDir),h(this.tmpRayDir.direction,this.tmpRayDir.direction),this.view.camera.position.hasZ&&(a=Math.abs(this.view.camera.position.z));let c=Math.max(M*a,V);const p=this.view._stage.renderView.getMinimalDepthForArea(null,s[0],s[1],this.view.state.camera,L);c=c>p?p:c,n(this.tmpRayDir.direction,this.tmpRayDir.direction,c),m(r,this.tmpRayDir.origin,this.tmpRayDir.direction);let l=c*i;const y=Math.max(z,1.01*t.nearFar[0]);if(e>0&&l<y&&(l=y,i=l/c),Math.abs(c-l)<1e-6)return;n(this.tmpRayDir.direction,this.tmpRayDir.direction,o*(1-i)),t.eye=m(O,t.eye,this.tmpRayDir.direction),t.center=m(O,t.center,this.tmpRayDir.direction)}b(this.view,t)}};x=t([r("esri.views.3d.state.controllers.global.ZoomStepController")],x);const O=p();export{x as ZoomStepController};
