/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import{forEach as t,result as i}from"../../../core/asyncUtils.js";import r from"../../../core/Logger.js";import{isNone as a,isSome as s}from"../../../core/maybe.js";import{debounce as n,isAbortError as o,eachAlways as l,onAbort as h,isAborted as m,createAbortError as d,always as c,throwIfAborted as g}from"../../../core/promiseUtils.js";import{whenOnce as u}from"../../../core/watchUtils.js";import{property as p}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/arrayUtils.js";import"../../../core/has.js";import"../../../core/accessorSupport/ensureType.js";import{subclass as y}from"../../../core/accessorSupport/decorators/subclass.js";import f from"../../../geometry/Extent.js";import{equals as x,create as w,width as _,height as v,copy as b,intersection as R}from"../../../geometry/support/aaBoundingRect.js";import{LayerView3D as S}from"./LayerView3D.js";import{computeImageExportSize as j,createGeometryForExtent as E,createOuterImageGeometry as I}from"./support/overlayImageUtils.js";import{toViewIfLocal as A}from"./support/projectExtentUtils.js";import C from"../support/debugFlags.js";import{RenderGeometry as L}from"../webgl-engine/lib/RenderGeometry.js";import{Texture as M}from"../webgl-engine/lib/Texture.js";import{ImageMaterial as D}from"../webgl-engine/materials/ImageMaterial.js";import G from"../../layers/LayerView.js";import{RefreshableLayerView as T}from"../../layers/RefreshableLayerView.js";const P=r.getLogger("esri.views.3d.layers.DynamicLayerView3D");let O=class extends(T(S(G))){constructor(){super(...arguments),this.drapeSourceType=0,this.updatePolicy=1,this.fullExtentInLocalViewSpatialReference=null,this.maximumDataResolution=null,this._images=new Array,this._extents=new Array,this._overlays=new Array,this.updateWhenStationary=!0,this.refreshDebounced=n((async e=>{this.destroyed||await this._doRefresh(e).catch((e=>{o(e)||r.getLogger(this.declaredClass).error(e)}))}),2e3)}initialize(){this.addResolvingPromise(A(this).then((e=>this._set("fullExtentInLocalViewSpatialReference",e)))),this.updatingHandles.add(this,"suspended",(()=>this._suspendedChangeHandler())),this.handles.add(this.view.resourceController.scheduler.registerIdleStateCallbacks((()=>{this._isScaleRangeActive()&&this.notifyChange("suspended")}),(()=>{}))),this._isScaleRangeLayer()&&this.updatingHandles.add(this.layer,"scaleRangeId",(()=>this.notifyChange("suspended")))}destroy(){this.clear()}setDrapingExtent(e,t){this._spatialReference=t,e.forEach((e=>{this._overlays[e.index]=e,this._updateImageExtent(e)}))}_updateImageExtent(e){const t=this._clippedExtent(e.extent,H);if(a(t))return;const i=j(e.extent,t,e.resolution);let r=e.pixelRatio*this.view.pixelRatio;if("imageMaxWidth"in this.layer||"imageMaxHeight"in this.layer){const e=this.layer.imageMaxWidth,t=this.layer.imageMaxHeight;if(i.width>e){const t=e/i.width;i.height=Math.floor(i.height*t),i.width=e,r*=t}if(i.height>t){const e=t/i.height;i.width=Math.floor(i.width*e),i.height=t,r*=e}}const s=this._extents[e.index];s&&x(s.extent,t)&&this._imageSizeEquals(t,s.imageSize,i)||(this._extents[e.index]={extent:w(t),imageSize:i,pixelRatio:r},this.suspended||this._fetch(e.index).catch((e=>{o(e)||P.error(e)})))}clear(){for(let e=0;e<this._images.length;e++)this._clearImage(e)}async doRefresh(){return this._doRefresh()}async _doRefresh(e){if(this.suspended)return;const t=[];for(let i=0;i<this._extents.length;i++)this._extents[i]&&t.push(this._fetch(i,e));await l(t)}canResume(){if(!super.canResume())return!1;if(this._isScaleRangeLayer()){const{minScale:e,maxScale:t}=this.layer;if(e>0||t>0){const i=this.view.scale;if(i<t||e>0&&i>e)return!1}}return!0}isUpdating(){return this._images.some((e=>!!e.loadingPromise))}async processResult(e,t,i){(t instanceof HTMLImageElement||t instanceof HTMLCanvasElement)&&(e.image=t)}findExtentInfoAt(e){for(const t of this._extents){const i=t.extent;if(new f(i[0],i[1],i[2],i[3],this._spatialReference).contains(e))return t}return null}getFetchOptions(){}async redraw(e,i){await t(this._images,(async(t,r)=>{t&&(await e(t,i),await this._createStageObjects(r,t.image,i))}))}_imageSizeEquals(e,t,i){if(!this.maximumDataResolution)return!1;const r=_(e)/this.maximumDataResolution.x,a=v(e)/this.maximumDataResolution.y,s=r/t.width,n=a/t.height,o=r/i.width,l=a/i.height,h=Math.abs(s-o),m=Math.abs(n-l),d=C.TESTS_DISABLE_OPTIMIZATIONS?0:1.5;return h<=d&&m<=d}async _fetch(e,t){if(this.suspended)return;const i=this._extents[e],r=i.extent;this._images[e]||(this._images[e]={texture:null,material:null,renderGeometry:null,loadingPromise:null,loadingAbortController:null,image:null,pixelData:null,renderExtent:w(r)});const a=this._images[e];a.loadingAbortController&&(a.loadingAbortController.abort(),a.loadingAbortController=null);const s=new f(r[0],r[1],r[2],r[3],this._spatialReference);if(0===s.width||0===s.height)return void this._clearImage(e);const n=new AbortController;a.loadingAbortController=n,h(t,(()=>n.abort()));const l=n.signal,g=this._waitFetchReady(l).then((()=>{const t={requestAsImageElement:!0,pixelRatio:this._overlays[e].pixelRatio,...this.getFetchOptions(),signal:l},{height:r,width:a}=i.imageSize;return this.layer.fetchImage(s,a,r,t)})).then((e=>{if(m(l))throw P.warnOnce("A call to fetchImage resolved even though the request was aborted. fetchImage should not resolve if options.signal.aborted is true."),d();return this.processResult(a,e)})).then((()=>b(a.renderExtent,r)));a.loadingPromise=g,c(g,(()=>{g===a.loadingPromise&&(a.loadingPromise=null,a.loadingAbortController=null)})),this.notifyChange("updating"),await g.then((async()=>{if(l.aborted)throw d();await this._createStageObjects(e,a.image,l),this.notifyChange("updating")})).catch((e=>{throw e&&!o(e)&&P.error(e),this.notifyChange("updating"),e}))}_clearImage(e){const t=this._images[e];if(t){s(t.renderGeometry)&&(this.view.basemapTerrain.overlayManager.renderer.removeGeometries([t.renderGeometry],this,2),t.renderGeometry=null);const e=this.view._stage;e.remove(t.texture),t.texture=null,e.remove(t.material),t.material=null,t.loadingAbortController&&(t.loadingAbortController.abort(),t.loadingAbortController=null),t.loadingPromise=null,t.image=null,t.pixelData=null}}async _createStageObjects(e,t,r){const n=this.view._stage,o=this._images[e],l=this.view.basemapTerrain.overlayManager.renderer,h=()=>{n.remove(o.texture),o.texture=null,s(o.renderGeometry)&&(l.removeGeometries([o.renderGeometry],this,2),o.renderGeometry=null)};if(t){const s=new M(t,{width:t.width,height:t.height,preMultiplyAlpha:!0,wrap:{s:33071,t:33071}});let m;if(await i(this._images[0===e?1:0].loadingPromise),g(r),0===e)m=E(o.renderExtent);else{const e=this._images[0].renderExtent;if(!e)return void h();m=I(e,o.renderExtent)}h(),n.add(s),n.loadSynchronous(s),o.texture=s,a(o.material)?(o.material=new D({transparent:!0,textureId:s.id}),n.add(o.material)):o.material.setParameters({textureId:s.id}),o.renderGeometry=new L(m,o.material),o.renderGeometry.origin=this._overlays[e].renderLocalOrigin,l.addGeometries([o.renderGeometry],this,2)}else h(),n.remove(o.material),o.material=null}_isScaleRangeLayer(){return"minScale"in this.layer&&"maxScale"in this.layer}_isScaleRangeActive(){return!!this._isScaleRangeLayer()&&(this.layer.minScale>0||this.layer.maxScale>0)}_clippedExtent(e,t){if("local"!==this.view.viewingMode)return b(t,e);const i=this.view.basemapTerrain;return i.ready?R(e,i.extent,t):b(t,e)}_suspendedChangeHandler(){this.suspended?this.clear():this.refreshDebounced()}async _waitFetchReady(e){await u(this.view,"stationary",e),g(e)}};e([p()],O.prototype,"layer",void 0),e([p()],O.prototype,"suspended",void 0),e([p({readOnly:!0})],O.prototype,"fullExtentInLocalViewSpatialReference",void 0),e([p()],O.prototype,"updating",void 0),O=e([y("esri.views.3d.layers.DynamicLayerView3D")],O);const H=w(),V=O;export{V as default};
