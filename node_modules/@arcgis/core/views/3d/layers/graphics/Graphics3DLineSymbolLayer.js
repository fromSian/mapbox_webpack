/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
import"../../../../geometry.js";import e from"../../../../core/Error.js";import{get as t,isNone as i,isSome as r}from"../../../../core/maybe.js";import{px2pt as a,pt2px as s}from"../../../../core/screenUtils.js";import{I as n}from"../../../../chunks/mat4f64.js";import{s as o}from"../../../../chunks/vec4.js";import{f as l}from"../../../../chunks/vec4f64.js";import{create as h,empty as p,expandWithBuffer as c,intersectsClippingArea as d,expandWithAABB as y}from"../../../../geometry/support/aaBoundingBox.js";import{getDriverAxisSizeValueAny as m}from"../../../../renderers/support/renderingInfoUtils.js";import{perVertexElevationAligner as g}from"./ElevationAligners.js";import{SymbolUpdateType as u,elevationModeChangeUpdateType as _,needsElevationUpdates2D as f}from"./elevationAlignmentUtils.js";import{ElevationContext as b}from"./ElevationContext.js";import v from"./Graphics3DDrapedGraphicLayer.js";import{Graphics3DObject3DGraphicLayer as M}from"./Graphics3DObject3DGraphicLayer.js";import{Graphics3DSymbolLayer as P,getAttributeValue as x}from"./Graphics3DSymbolLayer.js";import{parseCapType as U,geometryToRenderInfo as C,createGeometry as E,geometryToRenderInfoDraped as D}from"./lineUtils.js";import{initFastSymbolUpdatesState as z,updateFastSymbolUpdatesState as j}from"../support/FastSymbolUpdates.js";import{Object3D as L}from"../../webgl-engine/lib/Object3D.js";import{RenderGeometry as S}from"../../webgl-engine/lib/RenderGeometry.js";import{getStipplePatternForLinePattern as A}from"../../webgl-engine/materials/lineStippleUtils.js";import{RibbonLineMaterial as w}from"../../webgl-engine/materials/RibbonLineMaterial.js";import G from"../../../../geometry/Extent.js";import O from"../../../../geometry/Polygon.js";const V=["polyline","polygon","extent"];class R extends P{constructor(e,t,i,r){super(e,t,i,r),this._uniformSize=1}async doLoad(){if(this._vvConvertOptions={modelSize:[1,1,1],symbolSize:[1,1,1],unitInMeters:1,transformation:{anchor:[0,0,0],scale:[1,1,1],rotation:[0,0,0]},supportedTypes:{size:!0,color:!0,opacity:!0,rotation:!1}},this._context.renderer&&this._context.renderer.visualVariables&&this._context.renderer.visualVariables.length>0?this._fastUpdates=z(this._context.renderer,this._vvConvertOptions):this._fastUpdates={enabled:!1},!this._drivenProperties.size){const t=null!=this.symbolLayer.size?this.symbolLayer.size:a(1);if(t<0)throw new e("graphics3dlinesymbollayer:invalid-size","Symbol sizes may not be negative values");this._uniformSize=t}}getMaterialParameters(e){const i=t(this.symbolLayer,"material","color"),r=this._getCombinedOpacityAndColor(i);this._patternHidesLine&&(r[3]=0);const n=r[3],o={width:1,color:r,polygonOffset:!0,join:this.symbolLayer.join||"miter",cap:U(this.symbolLayer.cap||"butt"),transparent:n<1||this.needsDrivenTransparentPass,slicePlaneEnabled:this._context.slicePlaneEnabled,isClosed:e,stipplePattern:A(this.symbolLayer.pattern),stippleScaleWithLineWidth:!0};if(this._drivenProperties.size)this._fastUpdates.enabled&&this._fastUpdates.visualVariables.size&&(o.width=s(1));else{const e=null!=this.symbolLayer.size?this.symbolLayer.size:a(1);o.width=s(e)}return this._fastUpdates&&this._fastUpdates.visualVariables?{...o,...this._fastUpdates.materialParameters}:o}get lineMaterial(){return i(this._lineMaterial)&&(this._lineMaterial=new w(this.getMaterialParameters(!1)),this._context.stage.add(this._lineMaterial)),this._lineMaterial}get ringMaterial(){return i(this._ringMaterial)&&(this._ringMaterial=new w(this.getMaterialParameters(!0)),this._context.stage.add(this._ringMaterial)),this._ringMaterial}destroy(){super.destroy(),this._context.stage.remove(this._lineMaterial),this._lineMaterial=null,this._context.stage.remove(this._ringMaterial),this._ringMaterial=null}getDrivenSize(e){return this._drivenProperties.size&&e.size?s(m(e.size)):1}getSizeFeatureAttributeData(e){return this._fastUpdates.enabled&&this._fastUpdates.visualVariables.size?x(this._fastUpdates.visualVariables.size.field,e):null}getDrivenColor(e){const t=l(1,1,1,1);return this._drivenProperties.color&&e.color&&(t[0]=e.color[0],t[1]=e.color[1],t[2]=e.color[2],e.color.length>0&&(t[3]=e.color[3])),this._drivenProperties.opacity&&e.opacity&&(t[3]=e.opacity),t}getColorFeatureAttributeData(e){return this._fastUpdates.enabled&&this._fastUpdates.visualVariables.color?x(this._fastUpdates.visualVariables.color.field,e):null}getOpacityFeatureAttributeData(e){return this._fastUpdates.enabled&&this._fastUpdates.visualVariables.opacity?x(this._fastUpdates.visualVariables.opacity.field,e):null}createGraphics3DGraphic(e){const t=e.graphic;if(!this._validateGeometry(t.geometry,V,this.symbolLayer.type))return null;const i=this.setGraphicElevationContext(t,new b);return this.ensureDrapedStatus("on-the-ground"===i.mode),this.draped?this._createAsOverlay(e,this._context.layer.uid):this._createAs3DShape(e,i,t.uid)}applyRendererDiff(e,t){for(const i in e.diff){if("visualVariables"!==i)return 0;if(!j(this._fastUpdates,t,this._vvConvertOptions))return 0;r(this._lineMaterial)&&this._lineMaterial.setParameters(this._fastUpdates.materialParameters),r(this._ringMaterial)&&this._ringMaterial.setParameters(this._fastUpdates.materialParameters)}return 2}layerOpacityChanged(){return r(this._lineMaterial)&&this.updateMaterialLayerOpacity(this._lineMaterial),r(this._ringMaterial)&&this.updateMaterialLayerOpacity(this._ringMaterial),!0}updateMaterialLayerOpacity(e){const i=e.parameters.color,r=t(this.symbolLayer,"material","color"),a=this._patternHidesLine?0:this._getCombinedOpacity(r),s=a<1||this.needsDrivenTransparentPass,n=[i[0],i[1],i[2],a];e.setParameters({color:n,transparent:s})}layerElevationInfoChanged(e,t,i){const r=this._elevationContext.mode,a=_(R.elevationModeChangeTypes,i,r);if(a!==u.UPDATE)return a;const s=f(r);return this.updateGraphics3DGraphicElevationInfo(e,t,(()=>s))}slicePlaneEnabledChanged(){return r(this._lineMaterial)&&this._lineMaterial.setParameters({slicePlaneEnabled:this._context.slicePlaneEnabled}),r(this._ringMaterial)&&this._ringMaterial.setParameters({slicePlaneEnabled:this._context.slicePlaneEnabled}),!0}physicalBasedRenderingChanged(){return!0}pixelRatioChanged(){return!0}_getGeometryAsPolygonOrPolyline(e){switch(e.type){case"extent":if(e instanceof G)return O.fromExtent(e);break;case"polygon":case"polyline":return e}return null}_createAs3DShape(e,t,i){const a=e.graphic,s=this._getGeometryAsPolygonOrPolyline(a.geometry),o="polygon"===s.type?s.rings:s.paths,l=new Array,y=new Array,m=new Array,u=h(),_=C(s,this._context.elevationProvider,this._context.renderCoordsHelper,t),b="polygon"===s.type?"rings":"paths";this._logGeometryCreationWarnings(_,o,b,"LineSymbol3DLayer");for(let h=0;h<_.lines.length;h++){const{position:t,mapPosition:i}=_.lines[h];if(r(this._context.clippingExtent)&&(p(u),c(u,i),!d(u,this._context.clippingExtent)))continue;const a=this._createGeometry(e,t,i,s.type,1);l.push(a),y.push("polygon"===s.type?this.ringMaterial:this.lineMaterial),m.push(n)}if(0===l.length)return null;const v=new L({geometries:l,materials:y,transformations:m,castShadow:!1,metadata:{layerUid:this._context.layer.uid,graphicUid:i}}),P=new M(this,v,l,null,null,g,t);return P.alignedSampledElevation=_.sampledElevation,P.needsElevationUpdates=f(t.mode),P}_createGeometry(e,t,i,r,a){const s="polygon"===r?1:0,n=this._fastUpdates.enabled&&this._fastUpdates.visualVariables.color,o=this._fastUpdates.enabled&&this._fastUpdates.visualVariables.size;return E({overlayInfo:0===a?{spatialReference:this._context.overlaySR,renderCoordsHelper:this._context.renderCoordsHelper}:null,removeDuplicateStartEnd:s,uniformSize:this._uniformSize,attributeData:{position:t,mapPosition:i,size:o?null:this.getDrivenSize(e.renderingInfo),color:n?null:this.getDrivenColor(e.renderingInfo),sizeFeature:this.getSizeFeatureAttributeData(e.graphic),colorFeature:this.getColorFeatureAttributeData(e.graphic),opacityFeature:this.getOpacityFeatureAttributeData(e.graphic)}})}_createAsOverlay(e,t){const i=e.graphic,r=this._getGeometryAsPolygonOrPolyline(i.geometry),a="polygon"===r.type?r.rings:r.paths,s="polygon"===r.type?this.ringMaterial:this.lineMaterial;s.renderPriority=this._renderPriority;const n=new Array,l=h(),m=p(),g=D(r,this._context.overlaySR),u="polygon"===r.type?"rings":"paths";this._logGeometryCreationWarnings(g,a,u,"LineSymbol3DLayer");for(const h of g.lines){if(p(l),c(l,h.position),!d(l,this._context.clippingExtent))continue;y(m,l);const a=this._createGeometry(e,h.position,null,r.type,0),g=new S(a,s,t,i.uid);o(g.boundingSphere,.5*(l[0]+l[3]),.5*(l[1]+l[4]),0,.5*Math.sqrt((l[3]-l[0])*(l[3]-l[0])+(l[4]-l[1])*(l[4]-l[1]))),n.push(g)}return new v(this,n,m)}get _patternHidesLine(){const e=this.symbolLayer.pattern;return r(e)&&"style"===e.type&&"none"===e.style}}R.elevationModeChangeTypes={definedChanged:u.RECREATE,staysOnTheGround:u.NONE,onTheGroundChanged:u.RECREATE};export{R as Graphics3DLineSymbolLayer,R as default};
