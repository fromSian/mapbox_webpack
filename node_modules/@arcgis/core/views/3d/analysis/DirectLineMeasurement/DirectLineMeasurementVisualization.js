/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../chunks/tslib.es6.js";import"../../../../intl.js";import t from"../../../../core/Accessor.js";import i from"../../../../core/Handles.js";import{nextHighestPowerOfTen as s,deg2rad as n}from"../../../../core/mathUtils.js";import{isNone as a,destroyMaybe as r,isSome as o}from"../../../../core/maybe.js";import{formatDecimal as l,formatDMS as c,formatImperialLength as h,formatImperialVerticalLength as d,formatMetricLength as u,formatMetricVerticalLength as m}from"../../../../core/quantityFormatUtils.js";import{react as g,syncAndInitial as p}from"../../../../core/reactiveUtils.js";import{createRenderScreenPointArray3 as _,createRenderScreenPointArray as v}from"../../../../core/screenUtils.js";import{preferredImperialLengthUnit as b,convertUnit as L}from"../../../../core/unitUtils.js";import{whenOnce as w}from"../../../../core/watchUtils.js";import{property as y}from"../../../../core/accessorSupport/decorators/property.js";import"../../../../core/arrayUtils.js";import"../../../../core/has.js";import"../../../../core/accessorSupport/ensureType.js";import{subclass as S}from"../../../../core/accessorSupport/decorators/subclass.js";import{k as f}from"../../../../chunks/vec2.js";import{a as E,b as P}from"../../../../chunks/vec3.js";import{c as V}from"../../../../chunks/vec3f64.js";import{f as z}from"../../../../chunks/vec4f32.js";import{getReferenceEllipsoid as A}from"../../../../geometry/projectionEllipsoid.js";import{screenSpaceTangent as j}from"../support/viewUtils.js";import{LabelVisualElement as M,mirrorPosition as D}from"../../interactive/visualElements/LabelVisualElement.js";import{LineVisualElement as O}from"../../interactive/visualElements/LineVisualElement.js";import{MeasurementArrowVisualElement as C}from"../../interactive/visualElements/MeasurementArrowVisualElement.js";import{RightAngleQuadVisualElement as G}from"../../interactive/visualElements/RightAngleQuadVisualElement.js";import{GeodesicSegment as x,EuclideanSegment as H}from"../../interactive/visualElements/support/Segment.js";import{createStipplePatternSimple as k}from"../../webgl-engine/materials/lineStippleUtils.js";import{onLocaleChange as U}from"../../../../intl/locale.js";import{fetchMessageBundle as R}from"../../../../intl/messages.js";let T=class extends t{constructor(e){super(e),this._params={...Q},this._handles=new i,this._segmentVisualElement=null,this._triangleVisualElement=null,this._rightAngleQuad=null,this._projectedGeodesicLine=null,this._geodesicStartHint=null,this._geodesicEndHint=null,this._segmentLabel=null,this._verticalLabel=null,this._horizontalLabel=null,this._startPosition=V(),this._endPosition=V(),this._cornerPosition=V(),this._startPositionAtSeaLevel=V(),this._endPositionAtSeaLevel=V(),this._state=0,this._triangleOrientationOverride=null,this.messages=null,this.loadingMessages=!0,this.visualElementOrientation=0,this.triangleCollapseRatioThreshold=.03}get ready(){return 1===this._state}get visible(){return this.analysisView.visible}get viewMode(){const{elevationAlignedStartPoint:e,elevationAlignedEndPoint:t}=this.analysisView;if(a(e)||a(t)||e.equals(t))return 0;const i=this.analysisView.result;if(a(i))return 1;if("geodesic"===i.mode)return this._requiresGeodesicGuideAt(this._startPosition)||this._requiresGeodesicGuideAt(this._endPosition)?3:1;const{verticalDistance:s,horizontalDistance:n}=i,r=s.value,o=n.value;return Math.min(r/o,o/r)<this.triangleCollapseRatioThreshold?1:2}get actualVisualizedMeasurement(){if(a(this.analysisView.result))switch(this.analysisView.measurementMode){case 0:case 1:default:return"euclidean";case 2:return"geodesic"}return this.analysisView.result.mode}get allowVisualElementsOrientationChange(){return a(this._triangleOrientationOverride)}set allowVisualElementsOrientationChange(e){a(this._triangleOrientationOverride)!==e&&(a(this._triangleOrientationOverride)?this._triangleOrientationOverride=this._actualVisualElementsOrientation:this._triangleOrientationOverride=null)}get labels(){const e="geodesic"===this.actualVisualizedMeasurement;return{direct:this._segmentLabel,horizontal:e?this._segmentLabel:this._horizontalLabel,vertical:this._verticalLabel}}get testData(){var e;return{labels:this.labels,stripeLength:null==(e=this._segmentVisualElement)?void 0:e.stripeLength}}initialize(){this._handles.add(w(this.view,"ready",(()=>this._initialize()),!0))}_initialize(){switch(this._state){case 1:throw new Error("invalid state");case 2:return}const e=this._params,t={attached:!0,view:this.view};this._segmentVisualElement=new C({...t,geometry:null,renderOccluded:4}),this._triangleVisualElement=new O({...t,width:e.triangleLineWidth,color:e.triangleColor,renderOccluded:4}),this._rightAngleQuad=new G({...t,color:W,renderOccluded:4});const i={...t,polygonOffset:!0,renderOccluded:4};this._projectedGeodesicLine=new O({...i,width:e.geodesicProjectionLineWidth,color:e.geodesicProjectionLineColor,stipplePattern:k(e.guideStippleLengthPixels)}),this._geodesicStartHint=new O({...i,width:e.guideLineWidth,color:e.geodesicProjectionLineColor,stipplePattern:k(e.guideStippleLengthPixels)}),this._geodesicEndHint=new O({...i,width:e.guideLineWidth,color:e.geodesicProjectionLineColor,stipplePattern:k(e.guideStippleLengthPixels)}),this._segmentLabel=new M({...t,fontSize:e.direcLabelFontSize}),this._verticalLabel=new M({...t,fontSize:e.verticalLabelFontSize}),this._horizontalLabel=new M({...t,fontSize:e.horizontalLabelFontSize}),this._handles.add([g((()=>{const{elevationAlignedStartPoint:e,elevationAlignedEndPoint:t}=this.analysisView,i=this.view;return{view:i,camera:i.state.camera,viewMode:this.viewMode,elevationAlignedStartPoint:e,elevationAlignedEndPoint:t,orientation:this._actualVisualElementsOrientation,visualizedMeasurement:this.actualVisualizedMeasurement,stripeLength:this._measurementArrowStripeLength}}),(e=>this._updateGeometryAndViewMode(e)),p),g((()=>({visible:this.visible,viewMode:this.viewMode})),(e=>this._updateVisualElementVisibility(e)),p),g((()=>({text:this._labelsText,visualizedMeasurement:this.actualVisualizedMeasurement})),(e=>this._updateLabelText(e)),p),g((()=>({visible:this.visible,viewMode:this.viewMode,state:this._state})),(e=>this._updateLabelVisibility(e)),p),g((()=>this._measurementArrowStripeLength),(e=>this._updateSegmentStripeLength(e)),p),U((async()=>this._updateMessageBundle()))]),this._state=1,this._updateMessageBundle()}destroy(){2!==this._state&&(this._handles=r(this._handles),this._segmentVisualElement=r(this._segmentVisualElement),this._triangleVisualElement=r(this._triangleVisualElement),this._rightAngleQuad=r(this._rightAngleQuad),this._projectedGeodesicLine=r(this._projectedGeodesicLine),this._geodesicStartHint=r(this._geodesicStartHint),this._geodesicEndHint=r(this._geodesicEndHint),this._segmentLabel=r(this._segmentLabel),this._verticalLabel=r(this._verticalLabel),this._horizontalLabel=r(this._horizontalLabel),this.set("view",null),this._state=2)}async whenReady(){await w(this,"ready")}_updateVisualElementVisibility({visible:e,viewMode:t}){if(this._segmentVisualElement.visible=!1,this._triangleVisualElement.visible=!1,this._rightAngleQuad.visible=!1,this._projectedGeodesicLine.visible=!1,this._geodesicStartHint.visible=!1,this._geodesicEndHint.visible=!1,e)switch(t){case 0:break;case 1:this._segmentVisualElement.visible=!0;break;case 2:this._segmentVisualElement.visible=!0,this._triangleVisualElement.visible=!0,this._rightAngleQuad.visible=!0;break;case 3:this._segmentVisualElement.visible=!0,this._projectedGeodesicLine.visible=!0,this._geodesicStartHint.visible=!0,this._geodesicEndHint.visible=!0}}_updateGeometryAndViewMode({view:e,camera:t,viewMode:i,elevationAlignedStartPoint:s,elevationAlignedEndPoint:n,orientation:r,visualizedMeasurement:o,stripeLength:l}){const c=e.renderCoordsHelper;if(a(s)||a(n)||s.equals(n))return;let h=this._startPosition,d=this._endPosition;c.toRenderCoords(s,h),c.toRenderCoords(n,d);const u=1===r?1:-1,m=u*(c.getAltitude(d)-c.getAltitude(h));m<0&&(h=this._endPosition,d=this._startPosition);const g="geodesic"===o?new x(this._startPosition,this._endPosition,c.spatialReference):new H(this._startPosition,this._endPosition);switch(this._segmentVisualElement.geometry=g,this._updateSegmentStripeLength(l),i){case 1:this._updateSegment(g,r);break;case 2:this._updateSegmentAndTriangle({view:e,camera:t,segment:g,orientation:r,startPosition:h,endPosition:d,deltaSign:u,altitudeDelta:m});break;case 3:this._updateSegmentAndProjection({view:e,orientation:r,startPosition:h,endPosition:d})}}_updateSegment(e,t){this._segmentLabel.anchor=1===t?"top":"bottom",this._segmentLabel.geometry={type:"segment",segment:e,sampleLocation:"center"}}_updateSegmentAndTriangle({view:{renderCoordsHelper:e},camera:t,segment:i,orientation:s,startPosition:n,endPosition:a,deltaSign:r,altitudeDelta:o}){const l=this._cornerPosition;e.worldUpAtPosition(n,l),E(l,l,r*Math.abs(o)),P(l,l,n),this._triangleVisualElement.geometry=[[[n[0],n[1],n[2]],[l[0],l[1],l[2]],[a[0],a[1],a[2]]]],this._rightAngleQuad.geometry={previous:n,center:l,next:a};const c=new H(n,l),h=new H(l,a),d=F(n,a,l,s,t);this._segmentLabel.anchor=d.segment,this._segmentLabel.geometry={type:"segment",segment:i,sampleLocation:"center"},this._verticalLabel.geometry={type:"segment",segment:c,sampleLocation:"center"},this._verticalLabel.anchor=d.vertical,this._horizontalLabel.geometry={type:"segment",segment:h,sampleLocation:"center"},this._horizontalLabel.anchor=d.horizontal}_updateSegmentAndProjection({view:{renderCoordsHelper:e},orientation:t,startPosition:i,endPosition:s}){e.setAltitude(this._startPositionAtSeaLevel,0,i),e.setAltitude(this._endPositionAtSeaLevel,0,s);const n=new x(this._startPositionAtSeaLevel,this._endPositionAtSeaLevel,e.spatialReference);this._projectedGeodesicLine.setGeometryFromSegment(n),this._geodesicStartHint.setGeometryFromSegment(new H(this._startPositionAtSeaLevel,i)),this._geodesicEndHint.setGeometryFromSegment(new H(this._endPositionAtSeaLevel,s)),this._segmentLabel.geometry={type:"segment",segment:n,sampleLocation:"center"},this._segmentLabel.anchor=1===t?"top":"bottom"}_updateLabelText({text:e,visualizedMeasurement:t}){o(e)?(this._segmentLabel.text="euclidean"===t?e.euclideanDistance:e.geodesicDistance,this._horizontalLabel.text=e.horizontalDistance,this._verticalLabel.text=e.verticalDistance):(this._segmentLabel.text=null,this._horizontalLabel.text=null,this._verticalLabel.text=null),this.notifyChange("labels")}_updateLabelVisibility({state:e,visible:t,viewMode:i}){if(1!==e)return;const s=this._segmentLabel,n=this._horizontalLabel,a=this._verticalLabel;if(s.visible=!1,n.visible=!1,a.visible=!1,t)switch(i){case 1:case 3:s.visible=!0;break;case 2:s.visible=!0,n.visible=!0,a.visible=!0}}get _labelsText(){if(1!==this._state)return null;const e=this.messages,t=this.analysisView.result;if(a(t)||a(e))return null;const{directDistance:i,horizontalDistance:s,verticalDistance:n,geodesicDistance:r,geodesicAngle:o}=t,g=this.analysisView.unit,p=e=>({euclideanDistance:"",geodesicDistance:"",horizontalDistance:"",verticalDistance:"",...e});switch(g){case"metric":return p({euclideanDistance:i&&u(e,i),geodesicDistance:r&&u(e,r),horizontalDistance:s&&u(e,s),verticalDistance:n&&m(e,n)});case"imperial":return p({euclideanDistance:i&&h(e,i),geodesicDistance:r&&h(e,r),horizontalDistance:s&&h(e,s),verticalDistance:n&&d(e,n)});case"degrees":{const t=o&&l(e,o,"degrees");return p({euclideanDistance:t,geodesicDistance:t,horizontalDistance:t})}case"degrees-minutes-seconds":return p({horizontalDistance:o&&c(o)});default:return p({euclideanDistance:i&&l(e,i,g),geodesicDistance:r&&l(e,r,g),horizontalDistance:s&&l(e,s,g),verticalDistance:n&&l(e,n,g)})}}_updateSegmentStripeLength(e){const t=this._segmentVisualElement;o(e)?(t.stripeLength=e,t.stripesEnabled=!0):t.stripesEnabled=!1}get _actualVisualElementsOrientation(){if(o(this._triangleOrientationOverride))return this._triangleOrientationOverride;const e=this.visualElementOrientation;return 0===e?this.view.state.camera.aboveGround?1:2:e}_requiresGeodesicGuideAt(e){const t=this.view;if(null==t||!t.state)return!1;const i=t.state.camera,s=t.renderCoordsHelper,n=i.computeScreenPixelSizeAt(e);return s.getAltitude(e)/n>=10}get _measurementArrowStripeLength(){const{result:e,unit:t}=this.analysisView;if(a(e))return null;let i=null;const n=e.directDistance;switch(t){case"metric":i=n&&n.toUnit("meters");break;case"imperial":i=n&&n.toUnit(b(n.value,n.unit));break;case"degrees":case"degrees-minutes-seconds":{const t=e.geodesicAngle;i=t&&t.toUnit("degrees");break}default:i=n&&n.toUnit(t)}if(a(i))return null;return s(i.value/30)*("degrees"===i.unit?A(this.view.spatialReference).metersPerDegree:L(1,i.unit,"meters"))}_updateMessageBundle(){this.loadingMessages=!0,R("esri/core/t9n/Units").then((e=>{this.messages=e})).finally((()=>{this.loadingMessages=!1}))}};function F(e,t,i,s,n){const a=B,r=I;n.projectToRenderScreen(i,a),n.projectToRenderScreen(t,r);const o={segment:"bottom",horizontal:"top",vertical:a[0]<r[0]?"left":"right"};{const s=J,a=K;if(j(e,i,s,n),j(e,t,a,n),f(s,a)>=q){const e=Math.sign(s[1])===Math.sign(a[1]);o.segment=e?D(o.vertical):o.vertical}else{const e=N;j(i,t,e,n),f(e,a)>=q&&(o.segment=Math.sign(e[0])===Math.sign(a[0])?D(o.horizontal):o.horizontal)}}if(2===s){const e=e=>"top"===e?"bottom":"top";o.segment=e(o.segment),o.horizontal=e(o.horizontal),o.vertical=e(o.vertical)}return o}e([y()],T.prototype,"_state",void 0),e([y()],T.prototype,"_triangleOrientationOverride",void 0),e([y()],T.prototype,"messages",void 0),e([y()],T.prototype,"view",void 0),e([y()],T.prototype,"analysis",void 0),e([y()],T.prototype,"analysisView",void 0),e([y()],T.prototype,"ready",null),e([y()],T.prototype,"loadingMessages",void 0),e([y()],T.prototype,"visible",null),e([y()],T.prototype,"viewMode",null),e([y()],T.prototype,"actualVisualizedMeasurement",null),e([y()],T.prototype,"visualElementOrientation",void 0),e([y()],T.prototype,"triangleCollapseRatioThreshold",void 0),e([y()],T.prototype,"allowVisualElementsOrientationChange",null),e([y()],T.prototype,"labels",null),e([y()],T.prototype,"testData",null),e([y()],T.prototype,"_labelsText",null),e([y()],T.prototype,"_actualVisualElementsOrientation",null),e([y()],T.prototype,"_measurementArrowStripeLength",null),T=e([S("esri.views.3d.analysis.DirectLineMeasurement.DirectLineMeasurementVisualization")],T);const W=z(1,.5,0,.75),Q={laserLineGlowColor:[1,.5,0],laserLineGlowWidth:8,laserLineGlowFalloff:8,laserLineInnerColor:[1,1,1],laserLineInnerWidth:.75,laserLineGlobalAlpha:.75,laserLineEnabled:!0,handleColor:[1,.5,0],handleOpacity:.5,handleRadius:5,triangleColor:W,triangleLineWidth:3,triangleCornerSize:32,triangleSubdivisions:128,arrowWidth:16,arrowOutlineColor:[1,.5,0,1],arrowOutlineWidth:.2,arrowStripeEvenColor:[1,1,1,1],arrowStripeOddColor:[1,.5,0,1],arrowStripeLength:16,arrowSubdivisions:128,geodesicProjectionLineWidth:2,geodesicProjectionLineColor:W,guideLineWidth:2,guideLineColor:W,guideStippleLengthPixels:6,labelDistance:25,direcLabelFontSize:16,horizontalLabelFontSize:12,verticalLabelFontSize:12},q=Math.cos(n(12)),B=_(),I=_(),J=v(),K=v(),N=v();export{T as DirectLineMeasurementVisualization};
