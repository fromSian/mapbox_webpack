/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
import{deg2rad as e}from"../../../../../core/mathUtils.js";import{isSome as t,unwrapOr as s}from"../../../../../core/maybe.js";import i from"../../../../../core/Quantity.js";import{e as o}from"../../../../../chunks/earcut.js";import{s as r,b as n}from"../../../../../chunks/vec2.js";import{a as h}from"../../../../../chunks/vec2f64.js";import{n as a,i as d,g,c as l,o as c,f as p,d as m,a as u,b as _}from"../../../../../chunks/vec3.js";import{c as C}from"../../../../../chunks/vec3f64.js";import{c as f}from"../../../../../chunks/vec4f64.js";import{canProjectWithoutEngine as S,canProjectToWGS84ComparableLonLat as L,projectPointToVector as P,projectPointToWGS84ComparableLonLat as R,projectDirection as w,projectVectorToVector as M}from"../../../../../geometry/projection.js";import{getSphericalPCPF as j,getReferenceEllipsoid as A}from"../../../../../geometry/projectionEllipsoid.js";import W from"../../../../../geometry/SpatialReference.js";import{segmentIntersects as v}from"../../../../../geometry/support/intersectsBase.js";import{segmentLengthGeodesicVector as z,bestFitPlane as I,fitHemisphere as U,triangleAreaEuclidean as G,triangleAreaGeodesic as V,planePointDistance as y,boundingSphere as T,segmentLengthGeodesic as F,segmentLengthEuclidean as N}from"../../support/measurementUtils.js";import{midpoint as b}from"../../support/viewUtils.js";import{getElevationAtPoint as k}from"../../../support/ElevationProvider.js";import{makeOrthonormal as E,tangentFrame as x}from"../../../support/mathUtils.js";class D{constructor(e,t){this.positionsWorldCoords=[],this.positionsRenderCoords=[],this.positionsProjectedWorldCoords=[],this.positionsFittedRenderCoords=[],this.positionsGeographic=[],this.positionsSpherical=[],this.positionsStereographic=[],this.pathSegmentLengths=[],this.geodesicPathSegmentLengths=[],this.perimeterSegmentLengths=[],this.intersectingSegments=new Set,this.geodesicIntersectingSegments=new Set,this.areaCentroidWorldCoords=C(),this.areaCentroidRenderCoords=C(),this.geodesicAreaCentroidRenderCoords=C(),this._length=0,this._centroidRenderCoords=C(),this._planeWorldCoords=f(),this._worldUp=C(),this._worldTangent=C(),this._frame=[C(),C(),C()],this._pathVersion=-1,this._validMeasurement=!1,this._hasCursorPoint=!1,this._mode=null,this._tempU=C(),this._tempV=C(),this._tempVec3=C(),this._tempSphere={center:C(),radius:0},this._sceneView=e,this.unitNormalizer=t}update(e,s,o,r,n,h,d){const g=this.unitNormalizer,l=this._sceneView.renderSpatialReference,c=this.unitNormalizer.spatialReference,p=t(s);if(this._pathVersion===e.version&&this._validMeasurement===r&&!d&&this._hasCursorPoint===p&&this._mode===h)return!1;this._pathVersion=e.version,this._validMeasurement=r,this._hasCursorPoint=p;const m=e.numVertices;this._resize(m);const u=j(o.spatialReference),_=S(o.spatialReference,u)&&L(o.spatialReference),C=this.positionsGeographic,f=this.positionsWorldCoords,w=this.positionsRenderCoords,M=this.positionsSpherical;e.forEachVertexPosition(((e,t)=>{B(o.elevationProvider,e),P(e,f[t],c),P(e,w[t],l),_&&(R(e,C[t]),P(e,M[t],u),a(M[t],M[t]))}));const A=this._updatePathLengths(r);if(this.pathLength=this._length>1?new i(g.normalizeDistance(A),"meters"):null,_){const e=this._updateGeodesicPathLengths(r,c);this.geodesicPathLength=this._length>1?new i(e,"meters"):null}else this.geodesicPathLength=null;return this._updateCursorSegmentLength(e,s),this._updateMode(e,h),r?(this._updateArea(o,g,l,c,n),_&&this._updateGeodesicArea(o),!0):(this.area=null,this.geodesicArea=null,this.perimeterLength=null,this.triangleIndices=null,this.geodesicTriangleIndices=null,this.intersectingSegments.clear(),this.geodesicIntersectingSegments.clear(),!0)}getData(){return{positionsWorldCoords:this.positionsWorldCoords,positionsRenderCoords:this.positionsRenderCoords,positionsProjectedWorldCoords:this.positionsProjectedWorldCoords,positionsFittedRenderCoords:this.positionsFittedRenderCoords,positionsGeographic:this.positionsGeographic,positionsSpherical:this.positionsSpherical,positionsStereographic:this.positionsStereographic,pathSegmentLengths:this.pathSegmentLengths,geodesicPathSegmentLengths:this.geodesicPathSegmentLengths,perimeterSegmentLengths:this.perimeterSegmentLengths,intersectingSegments:this.intersectingSegments,geodesicIntersectingSegments:this.geodesicIntersectingSegments,triangleIndices:this.triangleIndices,geodesicTriangleIndices:this.geodesicTriangleIndices,areaCentroidWorldCoords:this.areaCentroidWorldCoords,areaCentroidRenderCoords:this.areaCentroidRenderCoords,geodesicAreaCentroidRenderCoords:this.geodesicAreaCentroidRenderCoords,fittingMode:this.fittingMode,area:this.area,geodesicArea:this.geodesicArea,pathLength:this.pathLength,geodesicPathLength:this.geodesicPathLength,perimeterLength:this.perimeterLength,cursorSegmentLength:this.cursorSegmentLength,geodesicCursorSegmentLength:this.geodesicCursorSegmentLength,unitNormalizer:this.unitNormalizer,actualMeasurementMode:this.actualMeasurementMode}}_resize(e){for(e<this._length&&(this.positionsWorldCoords.length=e,this.positionsRenderCoords.length=e,this.positionsProjectedWorldCoords.length=e,this.positionsFittedRenderCoords.length=e,this.positionsGeographic.length=e,this.positionsSpherical.length=e,this.positionsStereographic.length=e,this.pathSegmentLengths.length=e,this.geodesicPathSegmentLengths.length=e,this.perimeterSegmentLengths.length=e,this._length=e);this._length<e;)this.positionsWorldCoords.push(C()),this.positionsRenderCoords.push(C()),this.positionsProjectedWorldCoords.push(h()),this.positionsFittedRenderCoords.push(C()),this.positionsGeographic.push(C()),this.positionsSpherical.push(C()),this.positionsStereographic.push(h()),this.pathSegmentLengths.push(0),this.geodesicPathSegmentLengths.push(0),this.perimeterSegmentLengths.push(0),++this._length}_updatePathLengths(e){const t=this.positionsWorldCoords,s=this.pathSegmentLengths;let i=0;for(let o=0;o<this._length;++o){const r=s[o]=d(t[o],t[(o+1)%this._length]);(o<this._length-1||e)&&(i+=r)}return i}_updateGeodesicPathLengths(e,t){const s=this.positionsGeographic,i=this.geodesicPathSegmentLengths;let o=0;for(let r=0;r<this._length;++r){const n=i[r]=z(s[r],s[(r+1)%this._length],t);(r<this._length-1||e)&&(o+=n)}return o}_updateArea(e,t,s,o,n){const h=e.renderCoordsHelper,a=this.positionsWorldCoords,d=this.positionsRenderCoords,C=this.positionsProjectedWorldCoords,f=this.positionsFittedRenderCoords,S=this._planeWorldCoords,L=this._centroidRenderCoords;b(d,L),h.worldUpAtPosition(L,this._worldUp),h.worldBasisAtPosition(L,0,this._worldTangent),w(L,this._worldUp,s,this._worldUp,o),w(L,this._worldTangent,s,this._worldTangent,o),a.length>2&&I(a,S),this.fittingMode=this._selectFittingMode(S,a,this._worldUp,n);let P=0;if("horizontal"===this.fittingMode){let e=-1/0;d.forEach(((t,s)=>{const i=h.getAltitude(d[s]);i>e&&(e=i,P=s)}))}const R=a[P];let j=S,A=this._worldTangent;"horizontal"===this.fittingMode?j=this._worldUp:"vertical"===this.fittingMode&&(j=this._tempVec3,A=this._worldUp,E(S,this._worldUp,j)),g(this._frame[2],j),E(A,j,this._frame[0]),l(this._frame[1],this._frame[0],this._frame[2]),c(this._frame[1],this._frame[1]);const W=this._tempVec3,v=this._tempU,z=this._tempV;for(let i=0;i<this._length;++i){const e=C[i],t=f[i];p(W,a[i],R),r(e,m(this._frame[0],W),m(this._frame[1],W)),u(v,this._frame[0],e[0]),u(z,this._frame[1],e[1]),_(W,v,z),_(W,W,R),M(W,o,t,s)}this.perimeterLength=this._length>0?new i(t.normalizeDistance(this._updatePerimeterLengths()),"meters"):null,b(f,this.areaCentroidRenderCoords),M(this.areaCentroidRenderCoords,s,this.areaCentroidWorldCoords,o),this._updateIntersectingSegments(),this.area=0===this.intersectingSegments.size?new i(t.normalizeArea(this._computeArea()),"square-meters"):null}_updateGeodesicArea(e){const t=e.renderCoordsHelper,s=this.positionsSpherical,o=this.positionsStereographic,n=this._tempVec3,h=U(s,n);if(!h)return void(this.geodesicArea=null);const a=this._tempU,d=this._tempV;x(n,a,d);for(let i=0;i<this._length;++i){const e=m(s[i],a),t=m(s[i],d),h=m(s[i],n);r(o[i],e/h,t/h)}u(n,n,A(e.spatialReference).radius),t.toRenderCoords(n,j(e.spatialReference),this.geodesicAreaCentroidRenderCoords),this._updateGeodesicIntersectingSegments(),this.geodesicArea=h&&0===this.geodesicIntersectingSegments.size?new i(this._computeGeodesicArea(),"square-meters"):null}_updatePerimeterLengths(){const e=this.positionsProjectedWorldCoords,t=this.perimeterSegmentLengths;let s=0;for(let i=0;i<this._length;++i){s+=t[i]=n(e[i],e[(i+1)%this._length])}return s}_updateIntersectingSegments(){const e=this.positionsProjectedWorldCoords,t=this.intersectingSegments;t.clear();for(let s=0;s<this._length;++s)for(let i=s+2;i<this._length;++i){if((i+1)%this._length===s)continue;const o=e[s],r=e[(s+1)%this._length],n=e[i],h=e[(i+1)%this._length];v(o,r,n,h)&&(t.add(s),t.add(i))}}_computeArea(){const e=this.positionsProjectedWorldCoords,t=q(e,2),s=this.triangleIndices=new Uint32Array(o(t,[],2));let i=0;for(let o=0;o<s.length;o+=3)i+=G(e[s[o]],e[s[o+1]],e[s[o+2]]);return i}_updateGeodesicIntersectingSegments(){const e=this.positionsStereographic,t=this.geodesicIntersectingSegments;t.clear();for(let s=0;s<this._length;++s)for(let i=s+2;i<this._length;++i){if((i+1)%this._length===s)continue;const o=e[s],r=e[(s+1)%this._length],n=e[i],h=e[(i+1)%this._length];v(o,r,n,h)&&(t.add(s),t.add(i))}}_computeGeodesicArea(){const e=this.positionsGeographic,t=q(this.positionsStereographic,2),s=this.geodesicTriangleIndices=new Uint32Array(o(t,[],2));let i=0;for(let o=0;o<s.length;o+=3)i+=V(e[s[o]],e[s[o+1]],e[s[o+2]],W.WGS84);return i}_selectFittingMode(t,s,i,o){const r=s.map((e=>Math.abs(y(t,e)))).reduce(((e,t)=>Math.max(e,t)),0);T(s,this._tempSphere);const n=r/(2*this._tempSphere.radius),h=n<o.maxRelativeErrorCoplanar,a=n<o.maxRelativeErrorAlmostCoplanar;let d="horizontal";if(h)d="oblique";else if(a){d=Math.abs(m(i,t))>Math.cos(e(o.verticalAngleThreshold))?"horizontal":"vertical"}return d}_updateCursorSegmentLength(e,s){const o=e.lastPoint;!e.isValidPolygon&&t(o)&&t(s)?(this.geodesicCursorSegmentLength=new i(F(o,s),"meters"),this.cursorSegmentLength=new i(this.unitNormalizer.normalizeDistance(N(o,s,this.unitNormalizer.spatialReference)),"meters")):(this.geodesicCursorSegmentLength=null,this.cursorSegmentLength=null)}_updateMode(e,s){if(0===s){this.actualMeasurementMode="euclidean";let s=0;null!=this.geodesicPathLength&&(s+=this.geodesicPathLength.value),!e.isValidPolygon&&t(this.geodesicCursorSegmentLength)&&(s+=this.geodesicCursorSegmentLength.value),s>H&&(this.actualMeasurementMode="geodesic")}else this.actualMeasurementMode=1===s?"euclidean":"geodesic";null==this.geodesicPathLength&&(this.actualMeasurementMode="euclidean"),this._mode=s}}function q(e,t){const s=new Float64Array(e.length*t);for(let i=0;i<e.length;++i){const o=e[i];for(let e=0;e<t;++e)s[i*t+e]=o[e]}return s}function B(e,t){t.hasZ||(t.z=s(k(e,t,"ground"),0))}const H=1e5;export{D as MeasurementDataManager};
