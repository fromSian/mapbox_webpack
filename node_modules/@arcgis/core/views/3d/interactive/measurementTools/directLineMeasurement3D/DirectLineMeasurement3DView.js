/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../../chunks/tslib.es6.js";import t from"../../../../../core/Accessor.js";import i from"../../../../../core/Handles.js";import{destroyMaybe as s,isSome as a,unwrap as n,applySome as r,isNone as o,unwrapOr as l}from"../../../../../core/maybe.js";import{react as h,initial as d}from"../../../../../core/reactiveUtils.js";import{screenPointObjectToArray as c}from"../../../../../core/screenUtils.js";import{whenNotOnce as u}from"../../../../../core/watchUtils.js";import{property as p}from"../../../../../core/accessorSupport/decorators/property.js";import"../../../../../core/arrayUtils.js";import"../../../../../core/has.js";import"../../../../../core/accessorSupport/ensureType.js";import{subclass as m}from"../../../../../core/accessorSupport/decorators/subclass.js";import{c as g}from"../../../../../chunks/vec3f64.js";import{fromPoints as y}from"../../../../../geometry/support/lineSegment.js";import{createSphereManipulator as v}from"../../manipulatorUtils.js";import{PickResult as w}from"./PickResult.js";import{copyParameter as _,pointToPointScreenDistance as b}from"../support/viewUtils.js";import{LaserlineVisualElement as f}from"../../visualElements/LaserlineVisualElement.js";import{getElevationAtPoint as L}from"../../../support/ElevationProvider.js";import{newIntersector as P}from"../../../webgl-engine/lib/Intersector.js";const V={laserLineGlowColor:[1,.5,0],laserLineGlowWidth:8,laserLineGlowFalloff:8,laserLineInnerColor:[1,1,1],laserLineInnerWidth:.75,laserLineGlobalAlpha:.75,laserLineEnabled:!0,handleColor:[1,.5,0],handleOpacity:.5,handleRadius:5};var S;!function(e){e.Manipulators="manipulators",e.AnalysisViewDestroyed="analysis-view-destroyed",e.AnalysisView="analysis-view"}(S||(S={}));let D=class extends t{constructor(e){super(e),this._state="pending",this.analysisView=null,this.cursorPoint=null,this._visible=!1,this._laserLine=null,this._handles=new i,this._lastDraggedHandle=null}normalizeCtorArgs(e){return{...e,params:e.params?_(V,e.params):_(V,{})}}initialize(){this._intersector=P(this.view.state.viewingMode),this._intersector.options.store=0,this._promise=this._initialize()}async _initialize(){switch(this._state){case"pending":break;case"destroyed":return Promise.reject("DirectLineMeasurement3DView already destroyed")}const e=await this.view.whenAnalysisView(this.analysis);return await e.whenReady(),this._set("analysisView",e),this._laserLine=new f({view:this.view,attached:!0}),this._visible&&this._updateVisibility(this._visible),this._connectToAnalysisView(),this._state="ready",e}destroy(){switch(this._state){case"pending":return void(this._state="destroyed");case"ready":break;default:return}this.hide(),this._handles=s(this._handles),this._laserLine=s(this._laserLine),this._state="destroyed"}when(){return this._promise.then((()=>{}))}async whenMessages(){const e=await this._promise;await u(e,"updating")}get requiresCursorPoint(){return"initial"===this.toolState.lineState&&this.toolState.active}get visible(){return this._visible}set visible(e){e?this.show():this.hide()}get viewMode(){const e=this.analysisView;return a(e)&&!e.destroyed?e.viewMode:0}get measurementMode(){const e=this.analysisView;return a(e)&&!e.destroyed?e.actualVisualizedMeasurement:"euclidean"}get testData(){const e=this._laserLine.testData,t=n(this.analysisView).testData;return{labels:null==t?void 0:t.labels,stripeLength:null==t?void 0:t.stripeLength,laserLineRenderer:{heightManifoldEnabled:!!a(e)&&e.heightManifoldEnabled,heightManifoldTarget:a(e)?e.heightManifoldTarget:null,pointDistanceEnabled:!!a(e)&&e.pointDistanceEnabled,pointDistanceOrigin:a(e)?e.pointDistanceOrigin:null,pointDistanceTarget:a(e)?e.pointDistanceTarget:null,lineVerticalPlaneEnabled:!!a(e)&&e.lineVerticalPlaneEnabled}}}get directLabelText(){const e=this.analysisView;return a(e)&&!e.destroyed?e.directLabelText:null}get horizontalLabelText(){const e=this.analysisView;return a(e)&&!e.destroyed?e.horizontalLabelText:null}get verticalLabelText(){const e=this.analysisView;return a(e)&&!e.destroyed?e.verticalLabelText:null}get _cursorPosition(){const e=g();return r(this.cursorPoint,(t=>this.view.renderCoordsHelper.toRenderCoords(t,e))),e}get _startPosition(){const e=g();return r(this.analysis.startPoint,(t=>this.view.renderCoordsHelper.toRenderCoords(t,e))),e}get _endPosition(){const e=g();return r(this.analysis.endPoint,(t=>this.view.renderCoordsHelper.toRenderCoords(t,e))),e}get _laserLineParams(){const e=this._focusPosition,{active:t,lineState:i}=this.toolState,s=this.viewMode,a=this.analysisView,n=this.params.laserLineEnabled&&!!e&&"measured"!==i&&t;if(!n||!this.visible||o(a)||a.destroyed)return{heightManifoldTarget:null,pointDistanceLine:null,lineVerticalPlaneSegment:null};const r=a.actualVisualizedMeasurement,l=n&&2===s;return{heightManifoldTarget:"euclidean"===r?e:null,pointDistanceLine:"local"!==this.view.viewingMode&&n&&!!this.analysis.startPoint&&"geodesic"===r?this._pointDistanceLine:null,lineVerticalPlaneSegment:l?y(this._startPosition,this._endPosition):null}}get _focusPosition(){const{lineState:e}=this.toolState,t=this.analysisView,i=a(t)&&!t.destroyed&&1===t.measurementMode,s=1===this.viewMode&&i;switch(e){case"drawing":return s?this._startPosition:this.analysis.endPoint?this._endPosition:this._startPosition;case"editing":return s?"start"===this._lastDraggedHandle?this._endPosition:this._startPosition:"start"===this._lastDraggedHandle?this._startPosition:this._endPosition;default:return a(this.cursorPoint)?this._cursorPosition:null}}get _pointDistanceLine(){return{origin:"drawing"===this.toolState.lineState||"end"===this._lastDraggedHandle?this._startPosition:this._endPosition,target:this._focusPosition}}get measurementSurfaceLocation(){const e=this.toolState.startPointSurfaceLocation,t=this.toolState.endPointSurfaceLocation;return null==e||null==t||"above-the-surface"===e&&"below-the-surface"===t||"below-the-surface"===e&&"above-the-surface"===t||"on-the-surface"===e&&"on-the-surface"===t?"camera-dependent":"above-the-surface"===e||"above-the-surface"===t?"above-the-surface":"below-the-surface"}createManipulators(){const e=()=>{const e=v(this.view,this.params.handleColor,this.params.handleOpacity);return e.available=!1,e.radius=this.params.handleRadius,e},t=e(),i=e();a(this.analysis.startPoint)&&(t.location=this.analysis.startPoint,t.available=!0),a(this.analysis.endPoint)&&(i.location=this.analysis.endPoint,i.available=!0);const s=()=>{let e=this._lastDraggedHandle;t.grabbing&&!i.grabbing&&(e="start"),i.grabbing&&!t.grabbing&&(e="end"),t.grabbing||i.grabbing||(e=null),this._lastDraggedHandle=e},n=t.events.on("grab-changed",s),r=i.events.on("grab-changed",s);return this._handles.add([n,r],S.Manipulators),{start:t,end:i}}show(){switch(this._state){case"ready":this._visible||this._updateVisibility(!0);break;case"pending":this._visible=!0;break;default:return}}hide(){switch(this._state){case"ready":this._visible&&this._updateVisibility(!1);break;case"pending":this._visible=!1;break;default:return}}clearMeasurement(){this.toolState.lineState="initial",this._clearOverride("measurementSurfaceLocation")}finishMeasurement(){if(!this._isOverridden("measurementSurfaceLocation")){const e=this.measurementSurfaceLocation,t="camera-dependent"===e?this.view.state.camera.aboveGround?"above-the-surface":"below-the-surface":e;this._override("measurementSurfaceLocation",t)}this.toolState.lineState="measured"}_connectToAnalysisView(){this._handles.remove(S.AnalysisView),this._handles.add([h((()=>r(this.analysisView,(e=>e.destroyed))),(e=>{e&&this._handles.remove(S.AnalysisView)}),d),h((()=>["measured"===this.toolState.lineState,this.analysisView]),(([e,t])=>{a(t)&&!t.destroyed&&(t.allowVisualElementsOrientationChange=!e)}),d),h((()=>this._laserLineParams),(e=>{const t=this._laserLine;t.heightManifoldTarget=e.heightManifoldTarget,t.pointDistanceLine=e.pointDistanceLine,t.lineVerticalPlaneSegment=e.lineVerticalPlaneSegment}),d)],S.AnalysisView)}_updateVisibility(e){this._visible=e,this.analysis.visible=e,e?this._laserLine.style={innerColor:this.params.laserLineInnerColor,innerWidth:this.params.laserLineInnerWidth,glowColor:this.params.laserLineGlowColor,glowWidth:this.params.laserLineGlowWidth,glowFalloff:this.params.laserLineGlowFalloff,globalAlpha:this.params.laserLineGlobalAlpha}:this.view.cursor=null,this._laserLine.visible=e}pick(e){const t=this.view.spatialReference,i=c(e.screenPoint);this.view.sceneIntersectionHelper.intersectToolIntersectorScreen(i,this._intersector);const s=this._intersector.results.min,a=g();if(!s.getIntersectionPoint(a))return new w;const n=this.view.renderCoordsHelper.fromRenderCoords(a,t);if(o(n))return new w;const r=2===s.intersector?"ground":"feature";return new w(r,a,n)}getElevation(e){return this.view.basemapTerrain.ready?l(L(this.view.elevationProvider,e),0):0}overlappingHandles(e,t){return b(e,t,this.view)<=this.params.handleRadius}};e([p()],D.prototype,"view",void 0),e([p()],D.prototype,"params",void 0),e([p({readOnly:!0})],D.prototype,"analysisView",void 0),e([p()],D.prototype,"analysis",void 0),e([p()],D.prototype,"cursorPoint",void 0),e([p()],D.prototype,"toolState",void 0),e([p()],D.prototype,"requiresCursorPoint",null),e([p()],D.prototype,"visible",null),e([p()],D.prototype,"viewMode",null),e([p()],D.prototype,"measurementMode",null),e([p()],D.prototype,"testData",null),e([p()],D.prototype,"directLabelText",null),e([p()],D.prototype,"horizontalLabelText",null),e([p()],D.prototype,"verticalLabelText",null),e([p()],D.prototype,"_visible",void 0),e([p()],D.prototype,"_laserLine",void 0),e([p()],D.prototype,"_cursorPosition",null),e([p()],D.prototype,"_startPosition",null),e([p()],D.prototype,"_endPosition",null),e([p()],D.prototype,"_lastDraggedHandle",void 0),e([p()],D.prototype,"_laserLineParams",null),e([p()],D.prototype,"_focusPosition",null),e([p()],D.prototype,"_pointDistanceLine",null),e([p()],D.prototype,"measurementSurfaceLocation",null),D=e([m("esri.views.3d.interactive.measurementTools.directLineMeasurement3D.DirectLineMeasurement3DView")],D);export{D as DirectLineMeasurement3DView};
