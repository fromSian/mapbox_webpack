/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
import t from"../../../../../core/Handles.js";import{isSome as e,isNone as i,unwrap as s,destroyMaybe as a}from"../../../../../core/maybe.js";import{reactTruthy as n,react as r,sync as l}from"../../../../../core/reactiveUtils.js";import{screenPointObjectToArray as o}from"../../../../../core/screenUtils.js";import{c as h}from"../../../../../chunks/vec3f64.js";import{createSphereManipulator as u}from"../../manipulatorUtils.js";import{screenToMap3D as _}from"../../editingTools/dragEventPipeline3D.js";import{copyParameter as d,pointToPointScreenDistance as c,resizeArray as p}from"../support/viewUtils.js";import{LaserlineVisualElement as y}from"../../visualElements/LaserlineVisualElement.js";import g from"../../../webgl-engine/lib/GeometryUtil.js";import{newIntersector as w}from"../../../webgl-engine/lib/Intersector.js";import{ManipulatorCollection as m}from"../../../../interactive/ManipulatorCollection.js";const V={laserLineGlowColor:[1,.5,0],laserLineGlowWidth:8,laserLineGlowFalloff:8,laserLineInnerColor:[1,1,1],laserLineInnerWidth:1,laserLineGlobalAlpha:.75,laserLineEnabled:!0,handleColor:[1,.5,0],handleOpacity:.5,handleRadius:5,handleRadiusHovered:10,handleRadiusMouse:10,handleRadiusTouch:25,pathLineColor:[1,.5,0,1],pathLineWidth:3,intersectingLineColor:[1,.2,0,1],perimeterLineColor:[1,.5,0,1],perimeterLineWidth:2,projectionLineColor:[1,.5,0,1],projectionLineWidth:2,projectionLineStippleSize:5,areaColor1:[1,.5,0,.5],areaColor2:[1,1,1,.5],fillColor:[1,.5,0,.5],lineSubdivisions:64,labelDistance:25};class v{constructor(t){var e,i,s;this.vertexManipulators=[],this._analysisView=null,this._analysisVisualization=null,this._state="pending",this._mode=0,this._cursorPoint=null,this._lastDraggedVertex=null,this._visible=!1,this._laserLine=null,this._cursorManipulator=null,this._listenerHandles=null,this._tempHandlePosition=h(),this._analysis=t.analysis,this._toolState=t.toolState,this._manipulators=null!=(e=t.manipulators)?e:new m,this._view=t.view,this._mode=null!=(i=t.mode)?i:0,this._cursorPoint=null!=(s=t.cursorPoint)?s:null,this._style=d(V,t.style),this._intersector=w(this._view.state.viewingMode),this._intersector.options.store=0,this._creationPromise=this._view.whenAnalysisView(this._analysis).then((t=>this._initialize(t)))}_initialize(t){switch(this._state){case"pending":break;case"destroyed":return}this._analysisView=t,this._analysisVisualization=t.analysisVisualization,this._analysisViewData=t.analysisViewData;const e=u(this._view,this._style.handleColor,this._style.handleOpacity);e.available=!1,e.radius=this._style.handleRadius,e.interactive=!1,this._manipulators.add(e),this._cursorManipulator=e,this._laserLine=new y({view:this._view,attached:!0,style:{glowColor:this._style.laserLineGlowColor,glowWidth:this._style.laserLineGlowWidth,glowFalloff:this._style.laserLineGlowFalloff,innerColor:this._style.laserLineInnerColor,innerWidth:this._style.laserLineInnerWidth,globalAlpha:this._style.laserLineGlobalAlpha}}),this._analysisView.analysisViewData.mode=this._mode,this._analysisViewData.cursorPoint=this._cursorPoint,this._visible&&this._updateVisibility(this._visible),this._state="ready"}destroy(){switch(this._state){case"pending":return void(this._state="destroyed");case"ready":break;default:return}this.hide(),this._laserLine.destroy(),this._laserLine=null,this._state="destroyed"}when(){return this._creationPromise.then((()=>{}))}async whenMessages(){await this._creationPromise,await new Promise((t=>{n((()=>!this._analysisView.updating),t,{initial:!0,sync:!0,once:!0})}))}get state(){return this._state}get analysisVisualization(){return this._analysisVisualization}get analysisView(){return this._analysisView}get validMeasurement(){return"ready"===this.state&&this._analysisViewData.validMeasurement}get path(){return"ready"!==this.state?null:this._analysisViewData.path}get requiresCursorPoint(){return("initial"===this._toolState.polygonState||"drawing"===this._toolState.polygonState)&&this._toolState.active}get visible(){return this._visible}set visible(t){t?this.show():this.hide()}get mode(){return this._mode}set mode(t){switch(this._state){case"pending":this._mode=t;break;case"ready":this._mode=t,this._analysisViewData.mode=t}}get cursorPoint(){return this._cursorPoint}set cursorPoint(t){switch(this._state){case"pending":this._cursorPoint=t;break;case"ready":this._cursorPoint=t,this._analysisViewData.cursorPoint=t}}get lastDraggedVertex(){return this._lastDraggedVertex}set lastDraggedVertex(t){switch(this._state){case"pending":this._lastDraggedVertex=t;break;case"ready":this._lastDraggedVertex=t,this._analysisViewData.lastDraggedVertex=t}}get testData(){const t=this._laserLine.testData;return{labels:this._analysisVisualization.testData.labels,laserLineRenderer:e(t)?{heightManifoldEnabled:t.heightManifoldEnabled,heightManifoldTarget:t.heightManifoldTarget,pointDistanceEnabled:t.pointDistanceEnabled,pointDistanceOrigin:t.pointDistanceOrigin,pointDistanceTarget:t.pointDistanceTarget,lineVerticalPlaneEnabled:t.lineVerticalPlaneEnabled}:{heightManifoldEnabled:!1,heightManifoldTarget:null,pointDistanceEnabled:!1,pointDistanceOrigin:null,pointDistanceTarget:null,lineVerticalPlaneEnabled:!1}}}show(){this._setVisiblity(!0)}hide(){this._setVisiblity(!1)}_setVisiblity(t){switch(this._state){case"ready":this._visible!==t&&this._updateVisibility(t);break;case"pending":this._visible=t;break;default:return}}_updateVisibility(t){this._visible=t,this._analysis.visible=t,this._laserLine.visible=t,t?(this._initializeListeners(),this._updateAll(this._analysisVisualization.viewData)):(this._destroyListeners(),this.vertexManipulators.forEach((t=>{this._removeVertexManipulator(t.manipulator)})),this.vertexManipulators=[],this._view.cursor=null)}vertexHandleAt(t,i){const s=this._manipulators.intersect(t,i);return e(s)?s.manipulator.metadata:null}manipulatorToVertex(t){return t.metadata}pick(t){const e=this._view.spatialReference,s=o(t.screenPoint);this._view.sceneIntersectionHelper.intersectToolIntersectorScreen(s,this._intersector);const a=this._intersector.results.min,n=h();if(!a.getIntersectionPoint(n))return new v.PickResult;const r=this._view.renderCoordsHelper.fromRenderCoords(n,e);if(i(r))return new v.PickResult;const l=2===a.intersector?"surface":"feature";return new v.PickResult(l,n,r)}overlappingHandles(t,e){return c(t,e,this._view)<=this._style.handleRadius}screenToMap3D(){return _(this._view)}finishMeasurement(){switch(this._state){case"pending":return;case"ready":{const t=this._analysisViewData.path;return void(t.numVertices<3?(t.clear(),this.cursorPoint=null,this._toolState.polygonState="initial"):(t.close(),this.cursorPoint=null,this._toolState.polygonState="measured"))}}}_updateAll(t){this._visible&&(this._updateVertexManipulators(t),this._updateLaserLine())}_createVertexManipulator(){const t=u(this._view,this._style.handleColor,this._style.handleOpacity);t.radius=this._style.handleRadius;return{id:this._manipulators.add(t),manipulator:t}}_removeVertexManipulator(t){this._manipulators.remove(t)}_updateVertexManipulators(t){const i=this._analysisViewData.path?this._analysisViewData.path.vertices:[],s=this.vertexManipulators;p(s,i.length,(()=>this._createVertexManipulator()),(t=>this._removeVertexManipulator(t.manipulator))),s.forEach(((e,s)=>{e.manipulator.metadata=i[s],e.manipulator.renderLocation=t.positionsRenderCoords[s]})),"drawing"===this._toolState.polygonState&&e(this.cursorPoint)?(this._cursorManipulator.available=!0,this._cursorManipulator.location=this.cursorPoint):this._cursorManipulator.available=!1}_getFocusPoint(){const t=this.lastDraggedVertex;switch(this._toolState.polygonState){case"drawing":return e(this.cursorPoint)?this.cursorPoint:e(t)?this._analysisViewData.path.getVertexPositionAsPoint(t):s(this._analysisViewData.path.lastPoint);case"editing":return e(t)?this._analysisViewData.path.getVertexPositionAsPoint(t):null;default:return this.cursorPoint}}_updateLaserLine(){const t=this._style.laserLineEnabled&&"measured"!==this._toolState.polygonState&&this._toolState.active,i=this._getFocusPoint();if(t&&e(i)){const t=this._tempHandlePosition;this._view.renderCoordsHelper.toRenderCoords(i,t),this._laserLine.heightManifoldTarget=t}else this._laserLine.heightManifoldTarget=null}_initializeListeners(){this._listenerHandles=new t,this._listenerHandles.add([r((()=>this._toolState.polygonState),(()=>this._updateLaserLine())),r((()=>this._analysisVisualization.viewData),(()=>this._updateAll(this._analysisVisualization.viewData)),l),r((()=>({lastDraggedVertex:this._analysisViewData.lastDraggedVertex,cursorPoint:this._analysisViewData.cursorPoint})),(()=>this._updateLaserLine())),r((()=>this._toolState.active),(()=>this._updateAll(this._analysisVisualization.viewData)))])}_destroyListeners(){this._listenerHandles=a(this._listenerHandles)}}v._handleGeometry=g.createSphereGeometry(1,32,32),function(t){class e{}t.PickRequest=e;class i{constructor(t=null,e=null,i=null){this.type=t,this.scenePoint=e,this.mapPoint=i}}t.PickResult=i}(v||(v={}));const b=v;export{b as default};
