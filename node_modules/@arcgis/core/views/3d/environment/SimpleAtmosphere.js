/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
import e from"../../../core/Logger.js";import{lerp as t,clamp as r}from"../../../core/mathUtils.js";import{removeMaybe as i,disposeMaybe as s,abortMaybe as a,isNone as o}from"../../../core/maybe.js";import{createResolver as n,isAbortError as h}from"../../../core/promiseUtils.js";import{init as m}from"../../../core/watchUtils.js";import{l}from"../../../chunks/mat4.js";import{c}from"../../../chunks/mat4f64.js";import{s as d}from"../../../chunks/vec2.js";import{a as u}from"../../../chunks/vec2f64.js";import{l as p,a as f,b as _,i as g,c as x,p as C}from"../../../chunks/vec3.js";import{c as R}from"../../../chunks/vec3f64.js";import{getReferenceEllipsoid as V}from"../../../geometry/projectionEllipsoid.js";import{isMars as j}from"../../../geometry/support/spatialReferenceUtils.js";import{requestImage as y}from"../../../support/requestImageUtils.js";import{computeInnerAltitudeFade as v,innerAtmosphereDepth as U}from"./atmosphereUtils.js";import{SimpleAtmosphereTechniqueConfiguration as b,SimpleAtmosphereTechnique as q}from"./SimpleAtmosphereTechnique.js";import w from"./resources/MarsAtmosphereTexture.js";import D from"./resources/SimpleAtmosphereTexture.js";import{makePiecewiseLinearFunction as A}from"../support/mathUtils.js";import{glLayout as T}from"../support/buffer/glUtil.js";import{newLayout as F}from"../support/buffer/InterleavedLayout.js";import{Default3D as M}from"../webgl-engine/lib/DefaultVertexAttributeLocations.js";import{createQuadVAO as S}from"../webgl-engine/lib/glUtil3D.js";import{project as W}from"../webgl-engine/lib/Util.js";import k from"../../webgl/BufferObject.js";import L from"../../webgl/Texture.js";import{vertexCount as O}from"../../webgl/Util.js";import H from"../../webgl/VertexArrayObject.js";const P=e.getLogger("esri.views.3d.environment.SimpleAtmosphere"),z=128,B=-U,I=0,E=50,G=()=>1-511/512,J=A([[50,.1015625],[500,.21875],[5e3,1-250/512],[5e4,.4140625]]);class K{constructor(e){this.view=e,this.type="simple",this._renderData={texV:u(),silCircleCenter:R(),silCircleV1:R(),silCircleV2:R(),altitudeFade:0,innerScale:0,undergroundFadeAlpha:0},this._fadeVaoCount=0,this._readyResolver=n(),this._readyController=new AbortController,this.texV1=1,this.isOnMars=j(e.spatialReference);const t=V(e.spatialReference);this.planetRadius=t.radius,this.outerRimWidth=t.outerAtmosphereRimWidth,this.innerRimFactor=(this.planetRadius+B)/this.planetRadius,this.middleRimFactor=(this.planetRadius+I)/this.planetRadius,this.outerRimFactor=(this.planetRadius+this.outerRimWidth)/this.planetRadius,this.texV0=I/this.outerRimWidth,this.texVScale=this.texV1-this.texV0}destroy(){this._readyResolver.reject(),this._cameraChangeHandle=i(this._cameraChangeHandle),this._texture=s(this._texture),this._fadeVao=s(this._fadeVao),this._vao=s(this._vao),this._readyController=a(this._readyController)}when(){return this._readyResolver.promise}initializeRenderContext(e){this._shaderTechniqueRepository=e.shaderTechniqueRep;const t=e.renderContext.rctx;this._cameraChangeHandle=m(this.view,"state.camera",(()=>e.requestRender()),!0),this._vao=this._createRibbon(t),this._vaoCount=O(this._vao,"geometry"),this._fadeVao=S(t),this._fadeVaoCount=O(this._fadeVao,"geometry"),y(this.isOnMars?w:D,{signal:this._readyController.signal}).then((r=>{this._texture=new L(t,{pixelFormat:6408,dataType:5121,wrapMode:33071,samplingMode:9729,flipped:!0},r),e.requestRender(),this._readyController=null,this._readyResolver.resolve()})).catch((e=>{h(e)||P.error("Unable to initialize simple atmosphere: image request failed",e),this._readyResolver.reject(e)}))}get atmosphereConeTechnique(){if(o(this._atmosphereConeTechnique)){const e=new b;e.geometry=0,this._atmosphereConeTechnique=this._shaderTechniqueRepository.acquire(q,e)}return this._atmosphereConeTechnique}get atmosphereUndergroundTechnique(){if(o(this._atmosphereUndergroundTechnique)){const e=new b;e.geometry=2,this._atmosphereUndergroundTechnique=this._shaderTechniqueRepository.acquire(q,e)}return this._atmosphereUndergroundTechnique}get canRender(){return null!=this._texture}render(e){this._update(e.camera);const t=e.rctx;if(this.atmosphereConeTechnique.bindPipelineState(t),this._renderData.undergroundFadeAlpha<1){const r=this.atmosphereConeTechnique.program;t.useProgram(r),r.setUniformMatrix4fv("proj",e.camera.projectionMatrix),r.setUniformMatrix4fv("view",e.camera.viewMatrix),r.setUniform3fv("silCircleCenter",this._renderData.silCircleCenter),r.setUniform3fv("silCircleV1",this._renderData.silCircleV1),r.setUniform3fv("silCircleV2",this._renderData.silCircleV2),r.setUniform2fv("texV",this._renderData.texV),r.bindTexture(this._texture,"tex"),e.scenelightingData.setLightDirectionUniform(r),r.setUniform1f("altitudeFade",this._renderData.altitudeFade),r.setUniform1f("innerScale",this._renderData.innerScale),t.bindVAO(this._vao),t.drawArrays(4,0,this._vaoCount)}if(this._renderData.undergroundFadeAlpha>0){const r=this.atmosphereUndergroundTechnique.program;t.useProgram(r),r.setUniform1f("undergroundFadeAlpha",this._renderData.undergroundFadeAlpha),e.scenelightingData.setLightDirectionUniform(r),r.setUniform3fv("cameraPosition",e.camera.eye),t.bindVAO(this._fadeVao),t.drawArrays(5,0,this._fadeVaoCount)}return!0}renderHaze(){return!1}_update(e){const i=R(),s=this.planetRadius,a=p(e.eye),o=a-s;if(o<0){const e=Math.min(-o/5e3,1);this._renderData.undergroundFadeAlpha=e}else this._renderData.undergroundFadeAlpha=0;const n=Math.max(E,o),h=s+B;this._renderData.innerScale=Z(s+n,s,h)-1,this._renderData.altitudeFade=v(o),f(i,e.eye,(s+E)/a),N(i,e.center,e.up,s,this._renderData);const m=this._computeScreenRimWidth(e,i,e.up,this._renderData),l=G(),c=J(o);let u=this.texV0+l*this.texVScale,_=this.texV0+m*c*this.texVScale;if(o>E){N(e.eye,e.center,e.up,s,this._renderData);const i=this._computeScreenRimWidth(e,e.eye,e.up,this._renderData),a=r((i-1.5)/(m-1.5),0,1);u=this.texV0+a*l*this.texVScale,_=this.texV0+t(this.texV1,m*c,a)*this.texVScale}d(this._renderData.texV,u,_)}_createRibbon(e){const t=new Float32Array(3+3*z*3),r=new Uint32Array(3*z*5);t[0]=0,t[1]=0,t[2]=-1;for(let a=0;a<z;a++){const e=9*a+3;t[e+0]=a,t[e+1]=this.innerRimFactor,t[e+2]=-1,t[e+3]=a,t[e+4]=this.middleRimFactor,t[e+5]=0,t[e+6]=a,t[e+7]=this.outerRimFactor,t[e+8]=1;const i=3*a+1,s=a===z-1?1:i+3,o=15*a;r[o+0]=i,r[o+1]=i+1,r[o+2]=s+1,r[o+3]=s+1,r[o+4]=s,r[o+5]=i,r[o+6]=i+1,r[o+7]=i+2,r[o+8]=s+2,r[o+9]=s+2,r[o+10]=s+1,r[o+11]=i+1,r[o+12]=i,r[o+13]=s,r[o+14]=0}const i=$.createBuffer(r.length),s=i.position;for(let a=0;a<r.length;++a){const e=3*r[a];s.set(a,0,t[e]),s.set(a,1,t[e+1]),s.set(a,2,t[e+2])}return new H(e,M,{geometry:T($)},{geometry:k.createVertex(e,35044,i.buffer)})}_computeScreenRimWidth(e,t,r,i){return _(X,i.silCircleCenter,i.silCircleV2),f(Y,X,this.outerRimFactor),l(Q,t,X,r),W(X,Q,e.projectionMatrix,e.viewport),W(Y,Q,e.projectionMatrix,e.viewport),g(X,Y)/e.height}}function N(e,t,r,i,s){const a=p(e),o=i*Math.sqrt(a*a-i*i)/a,n=Math.sqrt(i*i-o*o),h=s.silCircleV1,m=s.silCircleV2;return f(s.silCircleCenter,e,n/a),x(h,e,t),C(h)<1&&x(h,e,r),f(h,h,o/p(h)),x(m,h,e),f(m,m,o/p(m)),o}const Q=c(),X=R(),Y=R();function Z(e,t,r){return e*e/(Math.sqrt(e*e-t*t)*Math.sqrt(e*e-r*r)+t*r)}const $=F().vec3f("position");export{K as default};
