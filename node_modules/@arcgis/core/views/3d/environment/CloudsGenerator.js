/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import t from"../../../core/Accessor.js";import s from"../../../core/has.js";import{lerp as i}from"../../../core/mathUtils.js";import{removeMaybe as r,releaseMaybe as o,disposeMaybe as h,destroyMaybe as a,isNone as n}from"../../../core/maybe.js";import{property as c}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/arrayUtils.js";import"../../../core/accessorSupport/ensureType.js";import{subclass as u}from"../../../core/accessorSupport/decorators/subclass.js";import{f as m}from"../../../chunks/mat3.js";import{c as d}from"../../../chunks/mat3f64.js";import{q as p}from"../../../chunks/mat4.js";import{c as f}from"../../../chunks/mat4f64.js";import{f as l,z as _}from"../../../chunks/vec3f32.js";import{getReferenceEllipsoid as g}from"../../../geometry/projectionEllipsoid.js";import{CloudsTechniqueConfiguration as y,CloudsTechnique as b}from"./CloudsTechnique.js";import{NoiseTextureAtlas as v}from"./NoiseTextureAtlas.js";import{createQuadVAO as S}from"../webgl-engine/lib/glUtil3D.js";import{TaskPriority as x}from"../../support/Scheduler.js";import w from"../../webgl/FramebufferObject.js";let T=class extends t{constructor(e){super(e),this._frameTask=null,this._techniques=[],this._techniqueConfiguration=new y,this._cubeMapSize=s("esri-mobile")?1024:2048,this._viewMat3=d(),this._eye=_(),this._didRenderFaces=!1,this._raymarchingStepType=0,this._cloudRadius=0,this._viewMatrix=f();const t=j.sunny;this.coverage=i(t.coverage[1],t.coverage[0],.5),this.density=i(t.density[1],t.density[0],.5),this.absorption=i(t.absorption[1],t.absorption[0],.5),this.cloudSize=i(t.cloudSize[1],t.cloudSize[0],.5),this.detailSize=i(t.detailSize[1],t.detailSize[0],.5),this.smoothness=i(t.smoothness[1],t.smoothness[0],.5),this.cloudHeight=i(t.cloudHeight[1],t.cloudHeight[0],.5),this.raymarchingStepType=t.raymarchingStepType}_getTechnique(e){const t=this._techniques[e];return t||(this._techniqueConfiguration.steps=e,this._techniques[e]=new b({rctx:this.rctx,viewingMode:this.view.state.viewingMode},this._techniqueConfiguration),this._techniques[e])}initialize(){this._vao=S(this.rctx);const e=g(this.view.spatialReference);this._cloudRadius=.5*e.radius,this.resetRenderFlags(),this._frameTask=this.view.resourceController.scheduler.registerTask(x.CLOUDS_GENERATOR,this)}destroy(){this._frameTask=r(this._frameTask),this._techniques.forEach((e=>o(e))),this._techniques=null,this._frameBufferCube=h(this._frameBufferCube),this._vao=h(this._vao),this._noiseTexture=a(this._noiseTexture)}set coverage(e){this._coverage=e,this.resetRenderFlags()}get coverage(){return this._coverage}set density(e){this._density=this.remap(e,0,1,0,.3),this.resetRenderFlags()}set cloudSize(e){this._cloudSize=this.remap(Math.max(.01,1-e),0,1,0,.02),this.resetRenderFlags()}set detailSize(e){this._detailSize=this.remap(Math.max(.01,1-e),0,1,0,.2),this.resetRenderFlags()}set smoothness(e){this._smoothness=this.remap(1-e,0,1,0,.5),this.resetRenderFlags()}set absorption(e){this._sigmaE=1+e,this._power=this.remap(e,0,1,35,120),this.resetRenderFlags()}get absorption(){return this._sigmaE-1}set cloudHeight(e){this._cloudHeight=this.remap(e,0,1,0,1500),this.resetRenderFlags()}get cloudHeight(){return this._cloudHeight}set raymarchingStepType(e){this._raymarchingStepType=e,this.resetRenderFlags()}_ensureNoiseTexture(){return n(this._noiseTexture)&&(this._noiseTexture=new v(this.rctx,this.view),this._noiseTexture.render(this.rctx)),this._noiseTexture}get frameBufferCube(){if(n(this._frameBufferCube)){const e={target:34067,pixelFormat:6408,dataType:5121,wrapMode:33071,samplingMode:9729,hasMipmap:!1,width:this._cubeMapSize,height:this._cubeMapSize};this._frameBufferCube=new w(this.rctx,{colorTarget:2,width:this._cubeMapSize,height:this._cubeMapSize},e)}return this._frameBufferCube}get cubeMap(){return this._frameBufferCube}resetRenderFlags(){this._didRenderFaces=!1}remap(e,t,s,i,r){return i+(e-t)*(r-i)/(s-t)}get running(){return!this._didRenderFaces}runTask(e){if(0===this.coverage||n(this._vao))return void(this._didRenderFaces=!0);const t=this._ensureNoiseTexture().textureAtlas;if(n(t))return void(this._didRenderFaces=!0);const s=this.rctx.getViewport();this.rctx.setViewport(0,0,this._cubeMapSize,this._cubeMapSize),this.rctx.bindFramebuffer(this.frameBufferCube,!1,34069);const i=this._getTechnique(this._raymarchingStepType),r=i.program;this.rctx.useProgram(r),r.bindTexture(t,"cloudShapeTexture"),r.setUniform1f("cloudRadius",this._cloudRadius),r.setUniform1f("halfCubeMapSize",.5*this._cubeMapSize),r.setUniform1f("power",this._power),r.setUniform1f("sigmaE",this._sigmaE),r.setUniform1f("density",this._density),r.setUniform1f("cloudSize",this._cloudSize),r.setUniform1f("detailSize",this._detailSize),r.setUniform1f("smoothness",this._smoothness),r.setUniform1f("cloudHeight",this._cloudHeight),r.setUniform1f("coverage",this._coverage),this.rctx.bindVAO(this._vao),r.assertCompatibleVertexAttributeLocations(this._vao),i.bindPipelineState(this.rctx);for(let o=0;o<5;o++){const e=z[o],t=R[o];p(this._viewMatrix,this._eye,e,t),m(this._viewMat3,this._viewMatrix),r.setUniformMatrix3fv("viewMatrix",this._viewMat3);const s=34069+o;this.frameBufferCube.framebufferTexture2D(this.frameBufferCube.colorAttachment.glName,this.rctx.gl,36064,s),this.rctx.gl.drawArrays(this.rctx.gl.TRIANGLE_STRIP,0,4),this.rctx.gl.flush()}this.rctx.setViewport(s.x,s.y,s.width,s.height),this.requestRender(),this._didRenderFaces=!0,e.madeProgress()}get test(){return{coverage:this._coverage,density:this.remap(this._density,0,.3,0,1),absorption:this._sigmaE-1,cloudSize:1-this.remap(this._cloudSize,0,.02,0,1),detailSize:1-this.remap(this._detailSize,0,.2,0,1),smoothness:1-this.remap(this._smoothness,0,.5,0,1),cloudHeight:this.remap(this._cloudHeight,0,1500,0,1)}}};e([c({constructOnly:!0})],T.prototype,"rctx",void 0),e([c({constructOnly:!0})],T.prototype,"view",void 0),e([c({constructOnly:!0})],T.prototype,"requestRender",void 0),e([c()],T.prototype,"_frameTask",void 0),e([c()],T.prototype,"_didRenderFaces",void 0),e([c({readOnly:!0})],T.prototype,"running",null),T=e([u("esri.views.3d.environment.CloudsGenerator")],T);const z=[l(1,0,0),l(-1,0,0),l(0,1,0),l(0,-1,0),l(0,0,1)],R=[l(0,1,0),l(0,1,0),l(0,0,-1),l(0,0,1),l(0,1,0)];class M{constructor(e,t,s,i,r,o,h,a,n=.5){this.coverage=e,this.density=t,this.absorption=s,this.cloudSize=i,this.detailSize=r,this.smoothness=o,this.cloudHeight=h,this.raymarchingStepType=a,this.median=n}}const j={sunny:new M([.1,.7],[.02,.02],[0,0],[.86,.86],[.8,.8],[.5,.5],[.05,.05],0),cloudy:new M([.24,.7],[.135,.2],[0,0],[.5,.5],[.65,.7],[.3,.3],[1,1],2),rainy:new M([.5,.9],[.2,.5],[.3,.6],[.4,.4],[.7,.7],[.5,.5],[1,1],2),foggy:new M([.8,.8],[.5,.5],[0,0],[.85,.85],[.75,.75],[.8,.8],[.3,.3],1)};export{T as CloudsGenerator,j as cloudPresets};
