/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
import{smoothstep as e,lerp as t}from"../../../core/mathUtils.js";import{isNone as i,releaseMaybe as r,disposeMaybe as s}from"../../../core/maybe.js";import{b as n}from"../../../chunks/mat4.js";import{c as h}from"../../../chunks/mat4f64.js";import{s as o}from"../../../chunks/vec2.js";import{a}from"../../../chunks/vec2f64.js";import{l as c}from"../../../chunks/vec3.js";import{getReferenceEllipsoid as u}from"../../../geometry/projectionEllipsoid.js";import{atmosphereHeight as m}from"./atmosphereUtils.js";import{FogTechniqueConfiguration as p,FogTechnique as _}from"./FogTechnique.js";import{Pos2Tex as f}from"../webgl-engine/lib/DefaultVertexBufferLayouts.js";import{createQuadVAO as g}from"../webgl-engine/lib/glUtil3D.js";class d{constructor(e,t){this._projectionInverse=h(),this._viewInverse=h(),this._nearFar=a(),this._darkenHaze=!1,this._hazeMultiplier=1,this._strength=4e-6;const i=e.renderContext.rctx;this._vao=g(i,f),this._shaderTechniqueRepository=e.shaderTechniqueRep;const r=u(t.spatialReference);this._planetRadius=r.radius,this._atmosphereRadius=r.radius+m}set strength(e){this._strength=e}get strength(){return this._strength}get foggyWeatherTechnique(){if(i(this._foggyWeatherTechnique)){const e=new p;e.haze=!1,this._foggyWeatherTechnique=this._shaderTechniqueRepository.acquire(_,e)}return this._foggyWeatherTechnique}get distanceFogTechnique(){if(i(this._distanceFogTechnique)){const e=new p;e.haze=!0,this._distanceFogTechnique=this._shaderTechniqueRepository.acquire(_,e)}return this._distanceFogTechnique}destroy(){this._distanceFogTechnique=r(this._distanceFogTechnique),this._foggyWeatherTechnique=r(this._foggyWeatherTechnique),this._vao=s(this._vao)}when(){return Promise.resolve()}render(e,t,i){if(this._darkenHaze=i,this._update(e.camera,t),this._fogAmount<=0)return!1;const r=e.rctx,s=e.offscreenRenderingHelper,n=t?this.foggyWeatherTechnique:this.distanceFogTechnique;return r.useProgram(n.program),n.bindPipelineState(r),s.renderDepthDetached((()=>{n.program.bindTexture(s.depthTexture,"depthTex"),this._renderFog(n.program,e)})),!0}_renderFog(e,t){if(i(this._vao))return!1;const r=t.rctx;return t.scenelightingData.setLightDirectionUniform(e),e.setUniform3fv("cameraPosition",t.camera.eye),e.setUniformMatrix4fv("projectionInverse",this._projectionInverse),e.setUniformMatrix4fv("viewInverse",this._viewInverse),e.setUniform2fv("nearFar",this._nearFar),e.setUniform1f("atmosphereC",this._atmosphereC),e.setUniform1f("strength",this._strength),e.setUniform1f("fogAmount",this._hazeMultiplier*this._fogAmount),r.bindVAO(this._vao),e.assertCompatibleVertexAttributeLocations(this._vao),r.drawArrays(5,0,4),!0}_update(r,s){if(i(r))return;n(this._projectionInverse,r.projectionMatrix),n(this._viewInverse,r.viewMatrix),o(this._nearFar,r.near,r.far);const h=c(r.eye),a=h*h;this._atmosphereC=a-this._atmosphereRadius*this._atmosphereRadius,this._fogAmount=s?1-e(3e3,6e3,Math.abs(h-this._planetRadius)):1-e(7e3,1e4,Math.abs(h-this._planetRadius)),this._hazeMultiplier=this._darkenHaze?t(.4,1,e(9500,10500,h-this._planetRadius)):1}static isSupported(e){return e.capabilities.depthTexture}}export{d as Fog};
