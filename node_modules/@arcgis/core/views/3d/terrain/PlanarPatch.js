/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
import{lerp as t}from"../../../core/mathUtils.js";import{isSome as e}from"../../../core/maybe.js";import{c as i}from"../../../chunks/vec3f64.js";import{wrap as s}from"../../../geometry/support/aaBoundingBox.js";import{intersectsAABB as r}from"../../../geometry/support/frustum.js";import{isPlateCarree as o}from"../../../geometry/support/spatialReferenceUtils.js";import{createPlanarGlobePatch as a}from"./PatchGeometryFactory.js";import{Tile as n}from"./Tile.js";import{intersectAabbInvDirBefore as h}from"../webgl-engine/materials/internal/MaterialUtil.js";class l extends n{constructor(t,e,i){super(),this.horizontalScaleFactor=1,void 0!==t&&this.init(t,e,i)}init(i,s,r){super.init(i,s,r);const a=r.view.renderSpatialReference,n=e(a)&&o(a)&&r.spatialReference.isGeographic;this.horizontalScaleFactor=n?this.ellipsoid.radius*Math.PI/180:1,this._edgeLen=(this.extent[2]-this.extent[0])*this.horizontalScaleFactor,this._edgeLen2=this._edgeLen*this._edgeLen,this.centerAtSeaLevel[0]=t(this.extent[0],this.extent[2],.5)*this.horizontalScaleFactor,this.centerAtSeaLevel[1]=t(this.extent[1],this.extent[3],.5)*this.horizontalScaleFactor,this.centerAtSeaLevel[2]=0,this.updateRadiusAndCenter()}updateRadiusAndCenter(){this._updateCenter();const t=(this.extent[2]-this.extent[0])*Math.SQRT1_2,e=.5*(this.elevationBounds[0]-this.elevationBounds[1]);this._center[1][3]=Math.sqrt(t*t+e*e)}_isVisible(t){return r(t,this._aabb())}_aabb(){return s(this.extent[0]*this.horizontalScaleFactor,this.extent[1]*this.horizontalScaleFactor,this.elevationBounds[0],this.extent[2]*this.horizontalScaleFactor,this.extent[3]*this.horizontalScaleFactor,this.elevationBounds[1])}intersectsRay(t,e,i,s,r){c[0]=1/e[0],c[1]=1/e[1],c[2]=1/e[2];const o=r*(this.extent[2]-this.extent[0])*this.horizontalScaleFactor*.1;return h(this._aabb(),t,c,i+o,s)}createGeometry(t,e){a(t,this.extent,e,this.horizontalScaleFactor,this.renderData),this.setMemoryDirty()}getDefaultVerticesPerRowOnLevel(){return this.level<9?3:2}}const c=i();export{l as PlanarPatch};
