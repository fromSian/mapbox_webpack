/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
import{lerp as t}from"../../../core/mathUtils.js";import{n as i,s as e,h as s}from"../../../chunks/vec3.js";import{c as r,d as o}from"../../../chunks/vec3f64.js";import{lonLatToSphericalPCPF as n}from"../../../geometry/projection.js";import{getReferenceEllipsoid as h}from"../../../geometry/projectionEllipsoid.js";import{intersectsSphere as a}from"../../../geometry/support/frustum.js";import{create as l}from"../../../geometry/support/plane.js";import{createSphericalGlobePatch as d}from"./PatchGeometryFactory.js";import{Tile as c}from"./Tile.js";class u extends c{constructor(t,i,e){super(),this.obb=new Array(8),this.isWebMercator=!1;for(let s=0;s<8;s++)this.obb[s]=r();void 0!==t&&this.init(t,i,e)}init(e,s,r){super.init(e,s,r),this.isWebMercator=r.tilingScheme.spatialReference.isWebMercator;const h=this.ellipsoid.radius,a=this.extentInRadians[0],l=this.extentInRadians[1],d=this.extentInRadians[2],c=this.extentInRadians[3],u=e[0],p=t(l,c,.5),m=t(a,d,.5),f=0===u?0:Math.min(Math.abs(l),Math.abs(c));this._edgeLen=(d-a)*Math.cos(f)*h,this._edgeLen2=this._edgeLen*this._edgeLen,this._curvatureHeight=h-Math.sqrt(h*h-this._edgeLen2/4),n(this.centerAtSeaLevel,m,p,this.ellipsoid.radius,0);const _=o(this.centerAtSeaLevel);i(_,_),this.up=_,this._updateOBB(),this.updateRadiusAndCenter()}updateRadiusAndCenter(){if(0===this.lij[0])e(this._center[1],0,0,0),e(this._center[0],0,0,0),e(this._center[2],0,0,0),this.ellipsoid||(this.ellipsoid=h(this.surface.spatialReference)),this._center[1][3]=this.ellipsoid.radius+this.elevationBounds[1];else{this._updateCenter();const t=Math.max(s(this._center[1],this.obb[0]),s(this._center[1],this.obb[1]));this._center[1][3]=Math.sqrt(t)}}_isVisible(t){if(!a(t,this._center[1]))return!1;if(this.lij[0]<10)return!0;const i=this.obb;for(let e=0;e<6;e++){const s=4===e,r=t[e];s&&(m[0]=r[0],m[1]=r[1],m[2]=r[2],m[3]=r[3]-this.surface.view.state.camera.near);const o=s?m:r;let n;for(n=0;n<8;n++){const t=i[n];if(o[0]*t[0]+o[1]*t[1]+o[2]*t[2]+o[3]<0)break}if(8===n)return!1}return!0}computeElevationBounds(){super.computeElevationBounds(),this._updateOBB()}createGeometry(t,i){const e=this._isPole(this.lij[1],this.lij[0]);d(t,this.extent,i,this.renderData,this.extentInRadians,this.isWebMercator,this.ellipsoid,e),this.setMemoryDirty()}_updateOBB(){const t=this.extentInRadians,i=this.obb;for(let e=0;e<2;e++){const s=this.elevationBounds[e];let r=4*e;n(i[r++],t[0],t[1],this.ellipsoid.radius,s),n(i[r++],t[0],t[3],this.ellipsoid.radius,s),n(i[r++],t[2],t[3],this.ellipsoid.radius,s),n(i[r++],t[2],t[1],this.ellipsoid.radius,s)}if(this.isWebMercator){const t=this._isPole(this.lij[1],this.lij[0]);2===t?(e(i[1],0,0,this.ellipsoid.radius),e(i[2],0,0,this.ellipsoid.radius),e(i[5],0,0,this.ellipsoid.radius),e(i[6],0,0,this.ellipsoid.radius)):1===t&&(e(i[0],0,0,-this.ellipsoid.radius),e(i[3],0,0,-this.ellipsoid.radius),e(i[4],0,0,-this.ellipsoid.radius),e(i[7],0,0,-this.ellipsoid.radius))}}_isPole(t,i){let e=0;return t===(1<<i)-1&&(e+=1),0===t&&(e+=2),e}intersectsRay(t,i,e,s,r){const o=this._center[1],n=o[3]+e+.2*this.ellipsoid.radius*Math.abs(r*(this.extentInRadians[3]-this.extentInRadians[1])),h=i[0]*i[0]+i[1]*i[1]+i[2]*i[2],a=o[0]-t[0],l=o[1]-t[1],d=o[2]-t[2],c=(a*i[0]+l*i[1]+d*i[2])/h,u=i[0]*c-a,p=i[1]*c-l,m=i[2]*c-d;return u*u+p*p+m*m<n*n}getDefaultVerticesPerRowOnLevel(){return this.level<p.length?p[this.level]+1:2}}const p=[128,64,32,16,16,8,8,4],m=l();export{u as SphericalPatch};
